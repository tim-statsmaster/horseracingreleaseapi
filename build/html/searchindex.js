Search.setIndex({"docnames": ["Detection", "Detection.detect_cap_jockey_saddlecloth", "Detection.maskrcnn_benchmark", "Detection.maskrcnn_benchmark.config", "Detection.maskrcnn_benchmark.config.defaults", "Detection.maskrcnn_benchmark.config.paths_catalog", "Detection.maskrcnn_benchmark.data", "Detection.maskrcnn_benchmark.data.build", "Detection.maskrcnn_benchmark.data.collate_batch", "Detection.maskrcnn_benchmark.data.datasets", "Detection.maskrcnn_benchmark.data.datasets.coco", "Detection.maskrcnn_benchmark.data.datasets.concat_dataset", "Detection.maskrcnn_benchmark.data.datasets.list_dataset", "Detection.maskrcnn_benchmark.data.samplers", "Detection.maskrcnn_benchmark.data.samplers.distributed", "Detection.maskrcnn_benchmark.data.samplers.grouped_batch_sampler", "Detection.maskrcnn_benchmark.data.samplers.iteration_based_batch_sampler", "Detection.maskrcnn_benchmark.data.transforms", "Detection.maskrcnn_benchmark.data.transforms.build", "Detection.maskrcnn_benchmark.data.transforms.transforms", "Detection.maskrcnn_benchmark.engine", "Detection.maskrcnn_benchmark.engine.inference", "Detection.maskrcnn_benchmark.engine.trainer", "Detection.maskrcnn_benchmark.layers", "Detection.maskrcnn_benchmark.layers.batch_norm", "Detection.maskrcnn_benchmark.layers.l2_loss", "Detection.maskrcnn_benchmark.layers.misc", "Detection.maskrcnn_benchmark.layers.nms", "Detection.maskrcnn_benchmark.layers.roi_align", "Detection.maskrcnn_benchmark.layers.roi_pool", "Detection.maskrcnn_benchmark.layers.smooth_l1_loss", "Detection.maskrcnn_benchmark.modeling", "Detection.maskrcnn_benchmark.modeling.backbone", "Detection.maskrcnn_benchmark.modeling.backbone.backbone", "Detection.maskrcnn_benchmark.modeling.backbone.fpn", "Detection.maskrcnn_benchmark.modeling.backbone.resnet", "Detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler", "Detection.maskrcnn_benchmark.modeling.box_coder", "Detection.maskrcnn_benchmark.modeling.detector", "Detection.maskrcnn_benchmark.modeling.detector.detectors", "Detection.maskrcnn_benchmark.modeling.detector.generalized_rcnn", "Detection.maskrcnn_benchmark.modeling.matcher", "Detection.maskrcnn_benchmark.modeling.poolers", "Detection.maskrcnn_benchmark.modeling.registry", "Detection.maskrcnn_benchmark.modeling.roi_heads", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.box_head", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_feature_extractors", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.mask_head", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_feature_extractors", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors", "Detection.maskrcnn_benchmark.modeling.roi_heads.roi_heads", "Detection.maskrcnn_benchmark.modeling.rpn", "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator", "Detection.maskrcnn_benchmark.modeling.rpn.inference", "Detection.maskrcnn_benchmark.modeling.rpn.loss", "Detection.maskrcnn_benchmark.modeling.rpn.rpn", "Detection.maskrcnn_benchmark.modeling.utils", "Detection.maskrcnn_benchmark.solver", "Detection.maskrcnn_benchmark.solver.build", "Detection.maskrcnn_benchmark.solver.lr_scheduler", "Detection.maskrcnn_benchmark.structures", "Detection.maskrcnn_benchmark.structures.bounding_box", "Detection.maskrcnn_benchmark.structures.boxlist_ops", "Detection.maskrcnn_benchmark.structures.image_list", "Detection.maskrcnn_benchmark.structures.segmentation_mask", "Detection.maskrcnn_benchmark.utils", "Detection.maskrcnn_benchmark.utils.c2_model_loading", "Detection.maskrcnn_benchmark.utils.checkpoint", "Detection.maskrcnn_benchmark.utils.collect_env", "Detection.maskrcnn_benchmark.utils.comm", "Detection.maskrcnn_benchmark.utils.cv2_util", "Detection.maskrcnn_benchmark.utils.env", "Detection.maskrcnn_benchmark.utils.imports", "Detection.maskrcnn_benchmark.utils.logger", "Detection.maskrcnn_benchmark.utils.metric_logger", "Detection.maskrcnn_benchmark.utils.miscellaneous", "Detection.maskrcnn_benchmark.utils.model_serialization", "Detection.maskrcnn_benchmark.utils.model_zoo", "Detection.maskrcnn_benchmark.utils.registry", "Detection.predictor", "Detection.setup", "GCNClustering", "GCNClustering.GCNPrediction", "GCNClustering.models", "SceneClassifier", "SceneClassifier.predict", "SceneClassifier.predictor", "SceneClassifier.resnet_lstm", "Segmentation", "Segmentation.DeepLab", "Segmentation.Model", "Segmentation.generate_rail_mask", "Segmentation.generate_rail_pole", "Segmentation.generate_semantic_mask", "Tracking", "Tracking.final_tracking", "Tracking.find_trajectories", "Tracking.initial_tracking", "config", "index", "main", "modules", "util", "util.FrameSaver", "util.database", "util.image_util", "util.mask_util", "util.result", "util.video_util"], "filenames": ["Detection.rst", "Detection.detect_cap_jockey_saddlecloth.rst", "Detection.maskrcnn_benchmark.rst", "Detection.maskrcnn_benchmark.config.rst", "Detection.maskrcnn_benchmark.config.defaults.rst", "Detection.maskrcnn_benchmark.config.paths_catalog.rst", "Detection.maskrcnn_benchmark.data.rst", "Detection.maskrcnn_benchmark.data.build.rst", "Detection.maskrcnn_benchmark.data.collate_batch.rst", "Detection.maskrcnn_benchmark.data.datasets.rst", "Detection.maskrcnn_benchmark.data.datasets.coco.rst", "Detection.maskrcnn_benchmark.data.datasets.concat_dataset.rst", "Detection.maskrcnn_benchmark.data.datasets.list_dataset.rst", "Detection.maskrcnn_benchmark.data.samplers.rst", "Detection.maskrcnn_benchmark.data.samplers.distributed.rst", "Detection.maskrcnn_benchmark.data.samplers.grouped_batch_sampler.rst", "Detection.maskrcnn_benchmark.data.samplers.iteration_based_batch_sampler.rst", "Detection.maskrcnn_benchmark.data.transforms.rst", "Detection.maskrcnn_benchmark.data.transforms.build.rst", "Detection.maskrcnn_benchmark.data.transforms.transforms.rst", "Detection.maskrcnn_benchmark.engine.rst", "Detection.maskrcnn_benchmark.engine.inference.rst", "Detection.maskrcnn_benchmark.engine.trainer.rst", "Detection.maskrcnn_benchmark.layers.rst", "Detection.maskrcnn_benchmark.layers.batch_norm.rst", "Detection.maskrcnn_benchmark.layers.l2_loss.rst", "Detection.maskrcnn_benchmark.layers.misc.rst", "Detection.maskrcnn_benchmark.layers.nms.rst", "Detection.maskrcnn_benchmark.layers.roi_align.rst", "Detection.maskrcnn_benchmark.layers.roi_pool.rst", "Detection.maskrcnn_benchmark.layers.smooth_l1_loss.rst", "Detection.maskrcnn_benchmark.modeling.rst", "Detection.maskrcnn_benchmark.modeling.backbone.rst", "Detection.maskrcnn_benchmark.modeling.backbone.backbone.rst", "Detection.maskrcnn_benchmark.modeling.backbone.fpn.rst", "Detection.maskrcnn_benchmark.modeling.backbone.resnet.rst", "Detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler.rst", "Detection.maskrcnn_benchmark.modeling.box_coder.rst", "Detection.maskrcnn_benchmark.modeling.detector.rst", "Detection.maskrcnn_benchmark.modeling.detector.detectors.rst", "Detection.maskrcnn_benchmark.modeling.detector.generalized_rcnn.rst", "Detection.maskrcnn_benchmark.modeling.matcher.rst", "Detection.maskrcnn_benchmark.modeling.poolers.rst", "Detection.maskrcnn_benchmark.modeling.registry.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.box_head.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_feature_extractors.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.mask_head.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_feature_extractors.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors.rst", "Detection.maskrcnn_benchmark.modeling.roi_heads.roi_heads.rst", "Detection.maskrcnn_benchmark.modeling.rpn.rst", "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.rst", "Detection.maskrcnn_benchmark.modeling.rpn.inference.rst", "Detection.maskrcnn_benchmark.modeling.rpn.loss.rst", "Detection.maskrcnn_benchmark.modeling.rpn.rpn.rst", "Detection.maskrcnn_benchmark.modeling.utils.rst", "Detection.maskrcnn_benchmark.solver.rst", "Detection.maskrcnn_benchmark.solver.build.rst", "Detection.maskrcnn_benchmark.solver.lr_scheduler.rst", "Detection.maskrcnn_benchmark.structures.rst", "Detection.maskrcnn_benchmark.structures.bounding_box.rst", "Detection.maskrcnn_benchmark.structures.boxlist_ops.rst", "Detection.maskrcnn_benchmark.structures.image_list.rst", "Detection.maskrcnn_benchmark.structures.segmentation_mask.rst", "Detection.maskrcnn_benchmark.utils.rst", "Detection.maskrcnn_benchmark.utils.c2_model_loading.rst", "Detection.maskrcnn_benchmark.utils.checkpoint.rst", "Detection.maskrcnn_benchmark.utils.collect_env.rst", "Detection.maskrcnn_benchmark.utils.comm.rst", "Detection.maskrcnn_benchmark.utils.cv2_util.rst", "Detection.maskrcnn_benchmark.utils.env.rst", "Detection.maskrcnn_benchmark.utils.imports.rst", "Detection.maskrcnn_benchmark.utils.logger.rst", "Detection.maskrcnn_benchmark.utils.metric_logger.rst", "Detection.maskrcnn_benchmark.utils.miscellaneous.rst", "Detection.maskrcnn_benchmark.utils.model_serialization.rst", "Detection.maskrcnn_benchmark.utils.model_zoo.rst", "Detection.maskrcnn_benchmark.utils.registry.rst", "Detection.predictor.rst", "Detection.setup.rst", "GCNClustering.rst", "GCNClustering.GCNPrediction.rst", "GCNClustering.models.rst", "SceneClassifier.rst", "SceneClassifier.predict.rst", "SceneClassifier.predictor.rst", "SceneClassifier.resnet_lstm.rst", "Segmentation.rst", "Segmentation.DeepLab.rst", "Segmentation.Model.rst", "Segmentation.generate_rail_mask.rst", "Segmentation.generate_rail_pole.rst", "Segmentation.generate_semantic_mask.rst", "Tracking.rst", "Tracking.final_tracking.rst", "Tracking.find_trajectories.rst", "Tracking.initial_tracking.rst", "config.rst", "index.rst", "main.rst", "modules.rst", "util.rst", "util.FrameSaver.rst", "util.database.rst", "util.image_util.rst", "util.mask_util.rst", "util.result.rst", "util.video_util.rst"], "titles": ["Detection package", "Detection.detect_cap_jockey_saddlecloth module", "Detection.maskrcnn_benchmark package", "Detection.maskrcnn_benchmark.config package", "Detection.maskrcnn_benchmark.config.defaults module", "Detection.maskrcnn_benchmark.config.paths_catalog module", "Detection.maskrcnn_benchmark.data package", "Detection.maskrcnn_benchmark.data.build module", "Detection.maskrcnn_benchmark.data.collate_batch module", "Detection.maskrcnn_benchmark.data.datasets package", "Detection.maskrcnn_benchmark.data.datasets.coco module", "Detection.maskrcnn_benchmark.data.datasets.concat_dataset module", "Detection.maskrcnn_benchmark.data.datasets.list_dataset module", "Detection.maskrcnn_benchmark.data.samplers package", "Detection.maskrcnn_benchmark.data.samplers.distributed module", "Detection.maskrcnn_benchmark.data.samplers.grouped_batch_sampler module", "Detection.maskrcnn_benchmark.data.samplers.iteration_based_batch_sampler module", "Detection.maskrcnn_benchmark.data.transforms package", "Detection.maskrcnn_benchmark.data.transforms.build module", "Detection.maskrcnn_benchmark.data.transforms.transforms module", "Detection.maskrcnn_benchmark.engine package", "Detection.maskrcnn_benchmark.engine.inference module", "Detection.maskrcnn_benchmark.engine.trainer module", "Detection.maskrcnn_benchmark.layers package", "Detection.maskrcnn_benchmark.layers.batch_norm module", "Detection.maskrcnn_benchmark.layers.l2_loss module", "Detection.maskrcnn_benchmark.layers.misc module", "Detection.maskrcnn_benchmark.layers.nms module", "Detection.maskrcnn_benchmark.layers.roi_align module", "Detection.maskrcnn_benchmark.layers.roi_pool module", "Detection.maskrcnn_benchmark.layers.smooth_l1_loss module", "Detection.maskrcnn_benchmark.modeling package", "Detection.maskrcnn_benchmark.modeling.backbone package", "Detection.maskrcnn_benchmark.modeling.backbone.backbone module", "Detection.maskrcnn_benchmark.modeling.backbone.fpn module", "Detection.maskrcnn_benchmark.modeling.backbone.resnet module", "Detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler module", "Detection.maskrcnn_benchmark.modeling.box_coder module", "Detection.maskrcnn_benchmark.modeling.detector package", "Detection.maskrcnn_benchmark.modeling.detector.detectors module", "Detection.maskrcnn_benchmark.modeling.detector.generalized_rcnn module", "Detection.maskrcnn_benchmark.modeling.matcher module", "Detection.maskrcnn_benchmark.modeling.poolers module", "Detection.maskrcnn_benchmark.modeling.registry module", "Detection.maskrcnn_benchmark.modeling.roi_heads package", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head package", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.box_head module", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference module", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss module", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_feature_extractors module", "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors module", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head package", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference module", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss module", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.mask_head module", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_feature_extractors module", "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors module", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head package", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference module", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss module", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head module", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors module", "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors module", "Detection.maskrcnn_benchmark.modeling.roi_heads.roi_heads module", "Detection.maskrcnn_benchmark.modeling.rpn package", "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator module", "Detection.maskrcnn_benchmark.modeling.rpn.inference module", "Detection.maskrcnn_benchmark.modeling.rpn.loss module", "Detection.maskrcnn_benchmark.modeling.rpn.rpn module", "Detection.maskrcnn_benchmark.modeling.utils module", "Detection.maskrcnn_benchmark.solver package", "Detection.maskrcnn_benchmark.solver.build module", "Detection.maskrcnn_benchmark.solver.lr_scheduler module", "Detection.maskrcnn_benchmark.structures package", "Detection.maskrcnn_benchmark.structures.bounding_box module", "Detection.maskrcnn_benchmark.structures.boxlist_ops module", "Detection.maskrcnn_benchmark.structures.image_list module", "Detection.maskrcnn_benchmark.structures.segmentation_mask module", "Detection.maskrcnn_benchmark.utils package", "Detection.maskrcnn_benchmark.utils.c2_model_loading module", "Detection.maskrcnn_benchmark.utils.checkpoint module", "Detection.maskrcnn_benchmark.utils.collect_env module", "Detection.maskrcnn_benchmark.utils.comm module", "Detection.maskrcnn_benchmark.utils.cv2_util module", "Detection.maskrcnn_benchmark.utils.env module", "Detection.maskrcnn_benchmark.utils.imports module", "Detection.maskrcnn_benchmark.utils.logger module", "Detection.maskrcnn_benchmark.utils.metric_logger module", "Detection.maskrcnn_benchmark.utils.miscellaneous module", "Detection.maskrcnn_benchmark.utils.model_serialization module", "Detection.maskrcnn_benchmark.utils.model_zoo module", "Detection.maskrcnn_benchmark.utils.registry module", "Detection.predictor module", "Detection.setup module", "GCNClustering package", "GCNClustering.GCNPrediction module", "GCNClustering.models module", "SceneClassifier package", "SceneClassifier.predict module", "SceneClassifier.predictor module", "SceneClassifier.resnet_lstm module", "Segmentation package", "Segmentation.DeepLab module", "Segmentation.Model module", "Segmentation.generate_rail_mask module", "Segmentation.generate_rail_pole module", "Segmentation.generate_semantic_mask module", "Tracking package", "Tracking.final_tracking module", "Tracking.find_trajectories module", "Tracking.initial_tracking module", "config module", "Welcome to HorseRacingRelease\u2019s documentation!", "main module", "horseracing-v2.4", "util package", "util.FrameSaver module", "util.database module", "util.image_util module", "util.mask_util module", "util.result module", "util.video_util module"], "terms": {"maskrcnn_benchmark": [0, 114], "config": [0, 2, 35, 50, 65, 66, 112, 114], "default": [2, 3, 84, 90, 91, 103, 110, 121], "paths_catalog": [2, 3], "data": [0, 2, 82, 103, 109, 113, 120], "build": [2, 6, 17, 70], "collate_batch": [2, 6], "engin": [0, 2], "infer": [2, 20, 31, 42, 44, 45, 51, 57, 64], "trainer": [2, 20], "layer": [0, 2, 34], "batch_norm": [2, 23], "l2_loss": [2, 23], "misc": [2, 23], "nm": [2, 23, 47, 66], "roi_align": [2, 23], "roi_pool": [2, 23], "smooth_l1_loss": [2, 23, 25], "model": [0, 1, 2, 21, 71, 80, 89, 90, 92, 94, 98, 101, 105, 109, 114], "balanced_positive_negative_sampl": [2, 31], "box_cod": [2, 31, 47, 48, 66, 67], "matcher": [2, 31], "pooler": [2, 31], "registri": [2, 31, 78], "util": [0, 2, 9, 11, 31, 75, 112, 114], "solver": [0, 2], "lr_schedul": [2, 70], "structur": [0, 2, 109], "bounding_box": [2, 73], "boxlist_op": [2, 73], "image_list": [2, 12, 65, 73], "segmentation_mask": [2, 53, 73], "c2_model_load": [2, 78], "checkpoint": [2, 78, 103], "collect_env": [2, 78], "comm": [2, 78], "cv2_util": [2, 78], "env": [2, 78], "import": [2, 78, 110, 113], "logger": [2, 78, 80], "metric_logg": [2, 78], "miscellan": [2, 69, 78], "model_seri": [2, 78], "model_zoo": [2, 78], "horseracingresult": [1, 98, 104, 105, 106, 109, 113, 116], "sourc": [1, 5, 9, 10, 11, 12, 21, 23, 24, 25, 26, 28, 29, 30, 34, 35, 36, 37, 41, 42, 47, 48, 50, 52, 53, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 121], "A": [1, 66, 91, 96, 120], "cap": [1, 108, 109, 110], "bound": [1, 37, 47, 52, 53, 74, 75, 109], "box": [1, 37, 41, 42, 47, 52, 53, 58, 60, 65, 66, 74, 75, 77, 109], "jockei": [1, 92, 106, 108, 109, 110, 113, 120], "mask": [1, 2, 52, 53, 58, 60, 61, 73, 77, 119], "saddlecloth": [1, 92, 108, 109], "all": [1, 21, 23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 77, 89, 96, 100], "1": [1, 23, 26, 35, 41, 47, 52, 65, 72, 75, 91, 102, 103, 108, 109, 110, 111], "paramet": [1, 23, 24, 25, 30, 34, 37, 42, 47, 48, 52, 53, 60, 66, 74, 75, 82, 89, 92, 98, 103, 109, 110, 113, 120, 121], "object": [1, 5, 12, 21, 36, 37, 41, 42, 47, 48, 52, 53, 59, 66, 67, 74, 76, 77, 80, 82, 87, 90, 92, 95, 98, 99, 103, 104, 106, 111, 113, 117, 120], "note": [1, 48, 82, 109, 110, 113, 120], "The": [1, 34, 41, 47, 74, 75, 77, 84, 90, 108, 109, 110, 113, 121], "i": [1, 21, 26, 41, 42, 47, 52, 69, 74, 76, 77, 82, 84, 89, 90, 91, 95, 103, 105, 106, 108, 109, 110, 113], "maintain": [1, 83], "suzi": 1, "class": [5, 9, 10, 11, 12, 21, 23, 24, 26, 28, 29, 34, 35, 36, 37, 41, 42, 47, 48, 50, 52, 53, 56, 58, 59, 60, 61, 62, 65, 66, 67, 72, 74, 76, 77, 80, 87, 91, 92, 95, 96, 99, 100, 103, 104, 106, 111, 113, 117, 120], "maskscoringrcnn": [0, 92, 114], "cfg": [35, 47, 48, 50, 52, 53, 56, 58, 59, 60, 61, 62, 67, 71, 79, 80, 92], "confidence_threshold": 92, "0": [23, 26, 30, 35, 47, 52, 65, 69, 72, 75, 76, 89, 92, 95, 100, 103, 110, 111], "8": [65, 92, 95], "show_mask_heatmap": 92, "fals": [21, 41, 85, 92, 95, 102], "masks_per_dim": 92, "2": [5, 35, 41, 65, 74, 91, 92, 100, 103, 108, 109, 110, 111], "min_image_s": 92, "224": [42, 92], "weight_load": 92, "none": [9, 10, 12, 21, 23, 26, 34, 35, 47, 50, 52, 60, 65, 66, 77, 80, 90, 91, 92, 111], "base": [5, 9, 10, 11, 12, 21, 23, 24, 26, 28, 29, 34, 35, 36, 37, 41, 42, 47, 48, 50, 52, 53, 56, 58, 59, 60, 61, 62, 65, 66, 67, 72, 74, 76, 77, 80, 87, 91, 92, 95, 96, 99, 100, 103, 104, 106, 108, 109, 111, 117, 120], "categori": [0, 92], "__background": 92, "jockeycapscal": 92, "build_transform": [0, 92], "creat": [89, 92, 103, 120], "basic": 92, "transform": [2, 6, 9, 10, 12, 92], "wa": [82, 92], "us": [37, 42, 47, 52, 53, 77, 82, 89, 90, 91, 92, 103, 106, 108, 109, 110], "train": [2, 5, 23, 24, 26, 28, 29, 31, 32, 34, 35, 37, 42, 45, 47, 50, 51, 52, 56, 57, 58, 60, 61, 62, 64, 65, 66, 82, 89, 92, 94, 96, 97, 100, 105], "compute_predict": [0, 92], "original_imag": 92, "np": [92, 95], "ndarrai": 92, "an": [9, 11, 35, 47, 52, 53, 60, 74, 76, 77, 89, 92], "imag": [9, 11, 12, 42, 47, 52, 53, 65, 74, 75, 76, 77, 92, 95, 103, 109], "return": [12, 34, 41, 42, 47, 48, 52, 60, 66, 74, 75, 82, 83, 89, 90, 92, 95, 103, 109, 110, 113, 120, 121], "opencv": 92, "addit": [41, 92, 106], "inform": [47, 74, 92, 113], "properti": [87, 92], "can": [26, 42, 74, 76, 77, 89, 90, 92, 108], "found": 92, "field": [35, 47, 52, 60, 73, 74, 75, 76, 92, 106], "boxlist": [2, 42, 47, 48, 52, 53, 60, 65, 66, 73, 74, 75, 92], "via": [35, 75, 92], "predict": [21, 41, 47, 60, 92, 94, 95, 97, 99, 101, 103, 109, 114], "type": [34, 47, 52, 60, 66, 82, 90, 92, 103, 109, 110, 113, 120, 121], "get_result_by_fram": [0, 92], "select_top_predict": [0, 92], "thre": [92, 95], "select": 92, "onli": [41, 69, 75, 92, 103, 105, 110], "which": [41, 42, 52, 90, 92], "have": [41, 65, 75, 76, 89, 92], "score": [47, 58, 75, 92, 108, 109, 110], "self": 92, "descend": 92, "order": [34, 74, 75, 92, 113], "result": [21, 34, 42, 47, 52, 60, 82, 92, 98, 109, 114, 115], "comput": [23, 24, 26, 28, 29, 34, 35, 47, 48, 50, 53, 56, 58, 61, 62, 65, 67, 75, 84, 92, 96, 100, 108, 109], "It": [42, 76, 77, 82, 92, 108, 110, 113], "should": [23, 24, 26, 28, 29, 34, 35, 42, 50, 56, 58, 61, 62, 65, 82, 90, 92, 96, 100, 108, 110, 113], "contain": [36, 41, 47, 52, 67, 74, 77, 82, 89, 92], "resiz": [0, 53, 73, 74, 77, 92, 114], "min_siz": [66, 75, 92], "max_siz": 92, "get_siz": [0, 92], "image_s": [74, 76, 92], "submodul": [2, 114], "datasetcatalog": [2, 3, 5], "dataset": [2, 3, 5, 6, 21, 47, 95], "data_dir": [3, 5], "get": [3, 5, 37, 58, 95, 109, 120, 121], "modelcatalog": [2, 3, 5], "c2_detectron_model": [3, 5], "c2_detectron_suffix": [3, 5], "c2_imagenet_model": [3, 5], "s3_c2_detectron_url": [3, 5], "get_c2_detectron_12_2017_baselin": [3, 5], "get_c2_imagenet_pretrain": [3, 5], "coco": [5, 6, 9, 21, 52], "concat_dataset": [6, 9], "list_dataset": [6, 9], "sampler": [2, 6], "distribut": [6, 13, 82], "grouped_batch_sampl": [6, 13], "iteration_based_batch_sampl": [6, 13], "cocoresult": [2, 20, 21], "metric": [20, 21], "updat": [20, 21, 78, 87], "check_expected_result": [2, 20, 21], "compute_on_dataset": [2, 20, 21], "evaluate_box_propos": [2, 20, 21], "evaluate_predictions_on_coco": [2, 20, 21], "prepare_for_coco_detect": [2, 20, 21], "prepare_for_coco_segment": [2, 20, 21], "frozenbatchnorm2d": [2, 23, 24], "forward": [2, 23, 24, 26, 28, 29, 31, 32, 34, 35, 42, 45, 47, 50, 51, 52, 56, 57, 58, 60, 61, 62, 64, 65, 66, 94, 96, 97, 100], "conv2d": [2, 23, 26], "bia": [2, 23, 26], "dilat": [2, 23, 26], "group": [2, 23, 26, 108], "kernel_s": [2, 23, 26], "out_channel": [2, 23, 26, 34, 35], "output_pad": [2, 23, 26], "pad": [2, 23, 26, 52, 76], "padding_mod": [2, 23, 26], "stride": [2, 23, 26, 35, 65], "transpos": [2, 23, 26, 73, 74, 77], "weight": [2, 23, 26, 37, 89, 100], "convtranspose2d": [2, 23, 26], "interpol": [2, 23, 26], "roialign": [2, 23, 28, 42], "roipool": [2, 23, 29], "backbon": [2, 31, 89], "fpn": [31, 32, 42, 48], "resnet": [31, 32], "detector": [2, 31], "generalized_rcnn": [5, 31, 38], "roi_head": [2, 31], "rpn": [2, 31], "anchor_gener": [31, 64], "loss": [31, 44, 45, 51, 57, 60, 64], "balancedpositivenegativesampl": [2, 31, 36], "boxcod": [2, 31, 37], "decod": [31, 37, 66, 101, 102, 114], "encod": [31, 37], "below_low_threshold": [31, 41], "between_threshold": [31, 41], "set_low_quality_matches_": [31, 41], "levelmapp": [2, 31, 42], "convert_to_roi_format": [31, 42], "cat": [2, 31, 69], "make_lr_schedul": [2, 70, 71], "make_optim": [2, 70, 71], "warmupmultisteplr": [2, 70, 72], "get_lr": [70, 72], "add_field": [73, 74], "area": [21, 65, 73, 74], "clip_to_imag": [73, 74], "convert": [52, 73, 74, 77, 109, 120], "copy_with_field": [73, 74], "crop": [53, 73, 74, 77, 103], "get_field": [73, 74], "has_field": [73, 74], "boxlist_i": [2, 73, 75], "boxlist_nm": [2, 73, 75], "cat_boxlist": [2, 73, 75], "remove_small_box": [2, 73, 75], "imagelist": [2, 73, 76], "to_image_list": [2, 73, 76], "polygon": [2, 73, 77], "segmentationmask": [2, 53, 73, 77], "load_c2_format": [2, 78, 79], "load_resnet_c2_format": [2, 78, 79], "get_checkpoint_fil": [78, 80], "has_checkpoint": [78, 80], "load": [12, 78, 80, 84, 89, 90, 98, 105, 109, 120, 121], "save": [78, 80, 90], "tag_last_checkpoint": [78, 80], "detectroncheckpoint": [2, 78, 80], "collect_env_info": [2, 78, 81], "get_pil_vers": [2, 78, 81], "get_rank": [2, 78, 82], "get_world_s": [2, 78, 82], "is_main_process": [2, 78, 82], "scatter_gath": [2, 78, 82], "synchron": [2, 78, 82], "findcontour": [2, 78, 83], "setup_custom_environ": [2, 78, 84], "setup_environ": [2, 78, 84], "import_fil": [2, 78, 85], "setup_logg": [2, 78, 86], "metriclogg": [2, 78, 87], "smoothedvalu": [2, 78, 87], "avg": [78, 87], "global_avg": [78, 87], "median": [78, 87], "mkdir": [2, 78, 88], "align_and_update_state_dict": [2, 78, 89], "load_state_dict": [2, 78, 89], "strip_prefix_if_pres": [2, 78, 89], "cache_url": [2, 78, 90], "regist": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 78, 91, 96, 100], "central": 5, "catalog": 5, "path": [5, 12, 88, 103, 120, 121], "coco_2014_miniv": 5, "val2014": 5, "annot": 5, "instances_minival2014": 5, "json": 5, "coco_2014_train": 5, "train2014": 5, "instances_train2014": 5, "coco_2014_v": 5, "instances_val2014": 5, "coco_2014_valminusminiv": 5, "instances_valminusminival2014": 5, "static": [5, 106], "name": [5, 12, 80, 86, 89, 90, 102, 120, 121], "35857197": 5, "e2e_faster_rcnn_r": 5, "50": 5, "c4_1x": 5, "01_33_49": 5, "iax0mxvw": 5, "35857345": 5, "fpn_1x": 5, "01_36_30": 5, "cuf7qr7i": 5, "35857890": 5, "101": 5, "01_38_50": 5, "snxi7sx7": 5, "35858791": 5, "e2e_mask_rcnn_r": 5, "01_45_57": 5, "zgka7hpb": 5, "35858933": 5, "01_48_14": 5, "dzeqe4wc": 5, "35861795": 5, "02_31_37": 5, "kqyek4tt": 5, "36761737": 5, "e2e_faster_rcnn_x": 5, "32x8d": 5, "06_31_39": 5, "5mihi1fz": 5, "36761843": 5, "e2e_mask_rcnn_x": 5, "06_35_59": 5, "rzotklki": 5, "output": [5, 52, 66, 100, 103, 109, 113, 120], "3acoco_2014_valminusminiv": 5, "model_fin": 5, "pkl": 5, "fair": 5, "20171220": 5, "x": [5, 23, 24, 26, 34, 35, 42, 47, 50, 52, 56, 61, 62, 83, 96, 100, 109], "imagenetpretrain": 5, "msra": 5, "r": [5, 48], "http": [5, 26, 75, 90], "s3": [5, 90], "u": [5, 113], "west": 5, "amazonaw": [5, 90], "com": [5, 26, 75, 90], "detectron": 5, "cocodataset": [6, 9, 10], "get_img_info": [6, 9, 10, 11, 12], "concatdataset": [6, 9, 11], "cumulative_s": [6, 9, 11], "get_idx": [6, 9, 11], "listdataset": [6, 9, 12], "ann_fil": [9, 10], "root": [9, 10, 117], "remove_images_without_annot": [9, 10], "cocodetect": [9, 10], "index": [9, 10, 32, 35, 41, 112], "iter": [9, 11, 76], "same": [9, 11, 47, 75, 76, 89, 108, 109], "torch": [9, 11, 69, 76, 82, 90, 95], "expos": [9, 11], "extra": [9, 11, 23, 25, 30, 47, 52, 74, 89], "method": [9, 11, 48, 74, 77], "queri": [9, 11], "size": [9, 11, 23, 26, 41, 42, 52, 65, 66, 74, 75, 76, 77, 89, 109], "list": [9, 11, 12, 34, 42, 47, 48, 52, 60, 66, 69, 75, 76, 82, 95, 108, 109, 110, 113, 119, 120], "int": [9, 11, 23, 26, 75, 95, 103, 110, 113, 120, 121], "t_co": [9, 11], "idx": [9, 11], "simpl": [12, 110], "wrap": [12, 83], "item": [12, 109, 120], "dimens": [12, 74, 103], "without": [12, 42], "pre": [12, 89], "process": [12, 47, 52, 66, 82, 120], "iou_typ": 21, "bbox": [21, 74, 75, 96], "ap": 21, "ap50": 21, "ap75": 21, "apm": 21, "apl": 21, "box_propos": 21, "ar": [21, 23, 24, 34, 41, 47, 52, 60, 65, 74, 75, 82, 108, 109, 110], "100": [21, 47], "arm": 21, "arl": 21, "1000": 21, "keypoint": 21, "segm": 21, "coco_ev": 21, "expected_result": 21, "sigma_tol": 21, "data_load": 21, "devic": [21, 23, 26, 74, 95], "threshold": [21, 47, 52, 108, 109, 110], "limit": 21, "evalu": 21, "propos": [21, 37, 47, 48, 53, 60, 66], "recal": 21, "thi": [21, 23, 24, 26, 28, 29, 34, 35, 36, 37, 41, 48, 50, 53, 56, 58, 61, 62, 65, 67, 74, 76, 77, 82, 84, 89, 96, 100, 105, 106, 108, 110, 113], "function": [21, 23, 24, 26, 28, 29, 34, 35, 48, 50, 53, 56, 58, 61, 62, 65, 67, 69, 82, 83, 84, 91, 96, 100, 108, 109, 110, 113], "much": 21, "faster": [21, 48], "altern": 21, "offici": 21, "api": 21, "code": [21, 35, 42, 82, 105, 110, 113], "howev": 21, "produc": [21, 41], "slightli": 21, "differ": [21, 108, 109, 110], "coco_gt": 21, "coco_result": 21, "json_result_fil": 21, "box_onli": 21, "cuda": 21, "expected_results_sigma_tol": 21, "4": [21, 37, 42, 47, 66, 74, 75, 83, 96, 108, 109, 110, 111, 112], "output_fold": 21, "maskiou_on": [21, 53], "n": [23, 24, 41, 66, 75, 103, 108, 110], "batchnorm2d": [23, 24], "where": [23, 24, 47, 82, 90], "batch": [23, 24, 36, 108, 113], "statist": [23, 24], "affin": [23, 24], "fix": [23, 24, 36, 52], "defin": [23, 24, 26, 28, 29, 34, 35, 50, 53, 56, 58, 61, 62, 65, 74, 96, 100], "perform": [23, 24, 26, 28, 29, 34, 35, 42, 48, 50, 56, 58, 61, 62, 65, 66, 75, 84, 96, 100, 108], "everi": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100, 109], "call": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 91, 96, 100, 120], "overridden": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 90, 96, 100], "subclass": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "although": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "recip": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "pass": [23, 24, 26, 28, 29, 34, 35, 42, 50, 52, 56, 58, 61, 62, 65, 96, 100], "need": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100, 113, 120], "within": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100, 108, 113], "one": [23, 24, 26, 28, 29, 34, 35, 41, 47, 50, 52, 56, 58, 61, 62, 65, 89, 96, 100, 108, 109, 113], "instanc": [23, 24, 26, 28, 29, 34, 35, 50, 53, 56, 58, 61, 62, 65, 77, 95, 96, 100], "afterward": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "instead": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "sinc": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "former": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "take": [23, 24, 26, 28, 29, 34, 35, 50, 52, 56, 58, 61, 62, 65, 89, 96, 100], "care": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "run": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 84, 96, 100, 113], "hook": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "while": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 89, 96, 100], "latter": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "silent": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100], "ignor": [23, 24, 26, 28, 29, 34, 35, 50, 56, 58, 61, 62, 65, 96, 100, 109], "them": [23, 24, 26, 28, 29, 34, 35, 50, 53, 56, 58, 61, 62, 65, 82, 96, 100, 108, 119], "bool": [23, 24, 26, 28, 29, 34, 35, 42, 47, 50, 52, 56, 58, 60, 61, 62, 65, 66, 90, 96, 100], "input": [23, 25, 26, 28, 29, 30, 100, 102, 103, 109, 113], "target": [23, 25, 30, 48, 53, 58, 60, 66, 67, 100], "veri": [23, 25, 30], "similar": [23, 25, 30, 65, 109], "from": [23, 25, 30, 34, 37, 42, 47, 52, 60, 74, 82, 84, 89, 98, 103, 108, 109, 110, 113, 120], "pytorch": [23, 25, 26, 30, 90], "beta": [23, 25, 30], "helper": [26, 82, 91], "support": [26, 48], "empti": [26, 60], "tensor": [23, 26, 34, 37, 41, 42, 47, 52, 60, 66, 69, 74, 75, 76, 77, 95], "some": [26, 37], "nn": [26, 65], "ideal": [26, 113], "add": [26, 34, 47], "directli": [26, 52], "those": 26, "remov": 26, "onc": 26, "github": [26, 75], "issu": 26, "12013": 26, "implement": [26, 35, 42], "in_channel": [23, 26, 35], "union": [23, 26, 75], "tupl": [23, 26, 34, 35, 47, 74], "str": [23, 26, 75, 118], "true": [23, 26, 30, 35, 74, 90, 96, 99, 100, 102], "zero": [23, 26, 41, 76], "dtype": [23, 26], "option": [23, 26, 60, 90], "scale_factor": [23, 26], "mode": [23, 26, 74, 77, 113], "nearest": [23, 26, 95], "align_corn": [23, 26], "output_s": [23, 28, 29, 42], "spatial_scal": [23, 28, 29], "sampling_ratio": [23, 28, 42], "roi": [23, 28, 29, 42], "1111111111111111": [23, 30], "size_averag": [23, 30], "arg0": 23, "arg1": 23, "arg2": 23, "float": [23, 75], "non": [23, 47, 75], "maximum": [23, 41, 47, 75], "suppress": [23, 47, 75], "lastlevelmaxpool": [31, 32, 34], "bottleneckwithfixedbatchnorm": [31, 32, 35], "resnethead": [31, 32, 35], "stagespec": [31, 32, 35], "block_count": [32, 35], "return_featur": [32, 35], "stemwithfixedbatchnorm": [31, 32, 35], "box_head": [31, 44], "roi_box_feature_extractor": [44, 45], "roi_box_predictor": [44, 45], "mask_head": [31, 44], "roi_mask_feature_extractor": [44, 51], "roi_mask_predictor": [44, 51], "maskiou_head": [31, 44], "roi_maskiou_feature_extractor": [44, 57], "roi_maskiou_predictor": [44, 57], "anchorgener": [31, 64, 65], "add_visibility_to": [64, 65], "grid_anchor": [64, 65], "num_anchors_per_loc": [64, 65], "bufferlist": [31, 64, 65], "extend": [64, 65, 91], "generate_anchor": [31, 64, 65], "make_anchor_gener": [31, 64, 65], "rpnpostprocessor": [31, 64, 66], "add_gt_propos": [64, 66], "forward_for_single_feature_map": [64, 66], "select_over_all_level": [64, 66], "make_rpn_postprocessor": [31, 64, 66], "rpnlosscomput": [31, 64, 67], "match_targets_to_anchor": [64, 67], "prepare_target": [45, 48, 51, 53, 64, 67], "make_rpn_loss_evalu": [31, 64, 67], "batch_size_per_imag": 36, "positive_fract": 36, "sampl": [36, 48], "ensur": [36, 90], "thei": [34, 36, 42, 74, 76, 82], "proport": 36, "posit": [36, 48, 53, 108], "bbox_xform_clip": 37, "135166556742356": 37, "set": [37, 41, 42, 47, 52, 60, 65, 74, 75, 77, 113, 120, 121], "represent": 37, "regressor": 37, "rel_cod": 37, "origin": [37, 42, 47, 76, 89], "rel": 37, "offset": 37, "refer": [37, 47, 52, 75, 95, 106, 110], "reference_box": 37, "respect": [37, 74], "high_threshold": 41, "low_threshold": 41, "allow_low_quality_match": 41, "assign": 41, "each": [34, 41, 42, 47, 52, 74, 76, 82, 89, 95, 103, 108, 110, 113], "element": [41, 69, 82, 103], "e": [41, 82, 109, 110], "g": [41, 110], "ground": [41, 60], "truth": [41, 60], "exactli": 41, "match": [41, 89, 108, 110], "mai": [35, 41, 84], "more": [41, 42, 90], "mxn": 41, "match_quality_matrix": 41, "character": 41, "how": 41, "well": [41, 89], "pair": [41, 108, 109, 110], "For": [41, 65, 89, 110, 120], "exampl": [35, 41, 89, 90, 110], "matrix": [41, 65], "iou": [41, 75], "overlap": [41, 108], "valu": [41, 87, 90], "m": [41, 75, 110], "If": [41, 52, 53, 89, 90, 109, 110, 113, 120], "neg": [41, 48], "all_match": 41, "low": 41, "qualiti": 41, "specif": [41, 67, 74], "find": [41, 110, 120], "includ": [41, 47], "ti": 41, "unmatch": 41, "ha": [41, 47, 103, 108, 110, 113], "highest": [34, 41], "k_min": 42, "k_max": 42, "canonical_scal": 42, "canonical_level": 42, "ep": 42, "1e": 42, "06": 42, "determin": [42, 74, 110], "level": [34, 42, 60, 89], "map": [34, 42, 60, 65], "heurist": 42, "paper": 42, "scale": [42, 52], "current": [34, 42, 89], "hard": [42, 110], "made": 42, "gener": [42, 65, 105, 113], "later": 42, "also": [42, 48, 74, 113], "requir": [42, 105, 113], "strictli": 42, "necessari": [42, 84], "featur": [34, 42, 60, 61, 65, 95, 96, 108, 109, 110], "avail": 42, "thank": 42, "pool": 42, "oper": 42, "dim": 69, "effici": 69, "version": [69, 83], "avoid": 69, "copi": [69, 74], "singl": [69, 75, 76, 77, 95, 119], "in_channels_list": 34, "top_block": 34, "top": [34, 75], "suppos": [34, 77, 89], "increas": [34, 108], "depth": 34, "must": [34, 75, 82], "consecut": 34, "after": [34, 66, 75, 110], "resolut": 34, "first": [34, 90], "variant": 35, "argument": [35, 113], "usag": 35, "string": [35, 90, 103, 110, 120, 121], "specifi": [35, 52, 65, 75, 84], "file": [35, 67, 82, 84, 89, 90, 113, 120, 121], "resnet50stagesto4": 35, "custom": [35, 84], "written": 35, "user": [35, 84], "register_": 35, "bottleneck_channel": 35, "num_group": 35, "stride_in_1x1": 35, "block_modul": 35, "stage": 35, "width_per_group": 35, "64": [35, 65], "stride_init": 35, "res2_out_channel": 35, "256": [35, 65, 100, 102], "alia": 35, "number": [35, 103, 109, 110, 113, 120], "postprocessor": [44, 45, 47], "filter_result": [45, 47], "prepare_boxlist": [45, 47], "make_roi_box_post_processor": [44, 45, 47], "fastrcnnlosscomput": [44, 45, 48], "match_targets_to_propos": [45, 48, 51, 53], "subsampl": [45, 48], "make_roi_box_loss_evalu": [44, 45, 48], "fpnpredictor": [44, 45, 50], "fastrcnnpredictor": [44, 45, 50], "make_roi_box_predictor": [44, 45, 50], "maskpostprocessor": [44, 51, 52], "maskpostprocessorcocoformat": [44, 51, 52], "masker": [44, 51, 52], "forward_single_imag": [51, 52], "expand_box": [44, 51, 52], "expand_mask": [44, 51, 52], "make_roi_mask_post_processor": [44, 51, 52], "paste_mask_in_imag": [44, 51, 52], "maskrcnnlosscomput": [44, 51, 53], "make_roi_mask_loss_evalu": [44, 51, 53], "project_masks_on_box": [44, 51, 53], "maskrcnnc4predictor": [44, 51, 56], "make_roi_mask_predictor": [44, 51, 56], "maskioupostprocessor": [44, 57, 58], "make_roi_maskiou_post_processor": [44, 57, 58], "maskioulosscomput": [44, 57, 59], "make_roi_maskiou_loss_evalu": [44, 57, 59], "roimaskiouhead": [44, 57, 60], "build_roi_maskiou_head": [44, 57, 60], "maskioufeatureextractor": [44, 57, 61], "make_roi_maskiou_feature_extractor": [44, 57, 61], "maskioupredictor": [44, 57, 62], "make_roi_maskiou_predictor": [44, 57, 62], "score_thresh": 47, "05": 47, "5": [47, 52, 65, 95, 100, 108, 109, 111], "detections_per_img": 47, "classif": 47, "regress": 47, "post": [47, 52, 66], "appli": [47, 66], "obtain": [47, 82, 109, 120], "final": [47, 109], "num_class": [47, 100], "logit": [47, 52], "box_regress": [47, 66], "ech": [47, 52], "label": [47, 58, 60, 74, 120], "image_shap": 47, "probabl": [47, 52, 109], "shape": [47, 76, 100, 103, 109, 110], "row": 47, "repres": [47, 74, 77], "background": [47, 106], "confid": 47, "j": 47, "correspond": [47, 52, 53, 74, 82, 89, 110], "proposal_match": [48, 53, 67], "fg_bg_sampler": [48, 67], "cnn": [48, 52], "keep": [48, 75], "state": 48, "pretrain": [50, 89, 100], "max": 52, "addition": 52, "project": 52, "accord": [52, 58], "locat": [52, 53], "so": [52, 76], "past": 52, "format": [52, 65, 109], "im_h": 52, "im_w": 52, "thresh": 52, "discretization_s": 53, "given": [53, 65, 90, 103], "segment": [53, 77, 112, 114, 119], "prepar": 53, "fed": 53, "maskiou": [53, 58, 60, 61], "head": [53, 60, 61, 66, 110], "we": [53, 74, 89, 108, 110], "here": [53, 110], "pred_maski": 58, "loss_weight": 59, "selected_mask": 60, "maskiou_target": 60, "possibli": [60, 76], "sever": 60, "dure": 60, "test": [60, 103, 105], "dict": [60, 91, 120], "extractor": 61, "128": [65, 100, 109], "512": [65, 100], "aspect_ratio": 65, "anchor_strid": 65, "16": [65, 111], "32": [65, 95], "straddle_thresh": 65, "anchor": [65, 66, 67], "feature_map": 65, "grid_siz": 65, "buffer": 65, "parameterlist": 65, "x1": 65, "y1": 65, "x2": 65, "y2": 65, "center": 65, "approxim": 65, "sqrt": 65, "aspect": 65, "ratio": 65, "pre_nms_top_n": 66, "post_nms_top_n": 66, "nms_thresh": [66, 75], "fpn_post_nms_top_n": 66, "befor": [66, 89, 110], "feed": 66, "h": [66, 96, 100], "w": [66, 96, 100], "rpn_box_cod": 66, "is_train": [66, 102], "optim": [71, 72, 80], "mileston": 72, "gamma": 72, "warmup_factor": 72, "3333333333333333": 72, "warmup_it": 72, "500": 72, "warmup_method": 72, "linear": 72, "last_epoch": 72, "_lrschedul": 72, "xyxi": 74, "nx4": 74, "In": [74, 89], "uniqu": [74, 90], "store": [74, 76, 77, 98, 120], "field_data": 74, "remove_empti": 74, "cropss": 74, "rectangular": 74, "region": 74, "left": 74, "upper": 74, "right": 74, "lower": 74, "pixel": [74, 103, 109], "coordin": 74, "arg": [74, 76, 77, 83, 91, 95, 113], "kwarg": [74, 76, 77, 80, 83, 87, 91], "request": 74, "width": [74, 103], "height": [74, 103], "flip": 74, "rotat": 74, "90": 74, "degre": 74, "step": [74, 108], "param": [74, 90], "One": 74, "pil": 74, "flip_left_right": 74, "flip_top_bottom": 74, "rotate_90": 74, "rotate_180": 74, "rotate_270": 74, "transvers": 74, "boxlist1": 75, "boxlist2": 75, "intersect": 75, "over": [75, 87, 108], "two": [75, 91, 108, 110, 113], "xmin": 75, "ymin": 75, "xmax": 75, "ymax": 75, "box1": 75, "box2": 75, "chainer": 75, "chainercv": 75, "blob": 75, "master": 75, "bbox_iou": 75, "py": 75, "max_propos": 75, "score_field": 75, "kept": 75, "maxium": 75, "concaten": 75, "both": [75, 89, 108], "side": 75, "hold": [76, 77], "vari": 76, "work": [76, 84], "size_divis": 76, "t": [76, 87, 89, 108, 110], "numpi": [76, 103, 109, 110], "arrai": [76, 95, 103, 109, 110, 118, 119], "when": [76, 82, 91, 108, 110], "unfinish": 77, "meant": 77, "yet": 77, "2d": 77, "f": [79, 80, 91], "schedul": 80, "save_dir": [80, 86], "save_to_disk": 80, "last_filenam": 80, "primit": 82, "multi": 82, "gpu": 82, "commun": 82, "do": [82, 110], "gather": 82, "multipl": [82, 89], "were": 82, "retriev": 82, "launch": [82, 113], "slow": 82, "tight": 82, "loop": [82, 108], "serializ": 82, "mani": 82, "rank": 82, "between": [82, 83, 108, 110], "cv2": 83, "compat": 83, "3": [83, 96, 100, 103, 108, 109, 110, 111, 117], "compatibl": 83, "contour": 83, "hierarchi": 83, "custom_module_path": 84, "environ": [84, 90], "setup": [0, 84, 114], "python": 84, "op": 84, "allow": [84, 113], "module_nam": [85, 91], "file_path": 85, "make_import": 85, "distributed_rank": 86, "delimit": 87, "window_s": 87, "20": 87, "track": [87, 106, 111, 112, 113, 114, 120], "seri": 87, "provid": [87, 91], "access": [87, 91], "smooth": 87, "window": 87, "global": [87, 109], "averag": 87, "model_state_dict": 89, "loaded_state_dict": 89, "strategi": 89, "prefix": 89, "append": 89, "its": [89, 110], "kei": [89, 120], "due": 89, "nest": [89, 95], "imagenet": 89, "won": 89, "state_dict": 89, "might": 89, "bodi": [89, 106, 110], "res2": 89, "conv1": 89, "thu": 89, "want": 89, "togeth": [89, 108], "look": [89, 110, 113], "among": 89, "suffix": 89, "": [89, 90], "case": [89, 108], "exist": [89, 120], "longest": 89, "url": 90, "model_dir": [90, 95, 111, 113, 120], "progress": [90, 108], "serial": 90, "alreadi": 90, "present": 90, "deseri": 90, "filenam": 90, "part": [90, 120], "follow": [90, 108], "convent": 90, "sha256": 90, "ext": 90, "eight": 90, "digit": 90, "hash": 90, "verifi": 90, "torch_hom": 90, "directori": [90, 120], "torch_model_zoo": 90, "variabl": 90, "download": 90, "whether": [90, 108, 110], "displai": [90, 106], "bar": 90, "stderr": 90, "cached_fil": 90, "resnet18": 90, "5c106cde": 90, "pth": 90, "manag": [91, 113], "dictionari": [91, 120], "eg": 91, "creet": 91, "some_registri": 91, "default_modul": 91, "There": 91, "re": 91, "wai": 91, "new": [91, 108], "normal": [91, 108], "just": 91, "def": 91, "foo": 91, "foo_modul": 91, "decor": 91, "declar": 91, "foo_modeul_nicknam": 91, "like": 91, "foo_modeul": 91, "hvtconfig": [111, 114], "conn_thr": [111, 114], "scn_max": [111, 114], "12": 111, "kranjiconfig": [111, 114], "stawtconfig": [111, 114], "14": 111, "sttconfig": [111, 114], "task": [109, 111, 113, 114, 120], "detect": [109, 111, 112, 114], "frameextractor": [111, 114], "opticalflow": [111, 114], "railmask": [111, 114], "railpolemask": [111, 114], "sceneclassifi": [111, 112, 114], "semanticmask": [111, 114], "6": [108, 111], "get_model_info": [111, 114], "distanc": [99, 108, 109, 110, 111, 113, 120], "cours": [111, 113, 120], "get_model_path": [111, 114], "model_typ": 111, "horserac": 112, "v2": 112, "packag": [112, 114], "modul": [112, 114], "main": [109, 112, 114], "search": 112, "page": 112, "launch_task": [113, 114], "result_dir": [113, 120], "etc": 113, "respons": 113, "give": 113, "As": 113, "indic": [110, 113], "abov": 113, "run_horserac": [113, 114], "rune": 113, "intern": 113, "client": 113, "vid_dir": [113, 120], "folder": 113, "video": [113, 120, 121], "system": [110, 113], "know": 113, "under": 113, "racelabel": 113, "xlsx": 113, "go": 113, "mongodb": [113, 120], "point": [109, 110, 113], "full": 113, "up": [95, 108, 110, 113], "easier": 113, "tune": 113, "releas": 113, "draw": 113, "task_funct": [113, 114], "depend": 113, "write": 113, "disk": 113, "handl": 113, "itself": 113, "therefor": [105, 108, 113], "execut": 113, "subpackag": 114, "content": [90, 114], "detect_cap_jockey_saddlecloth": [0, 114], "predictor": [0, 97, 114], "framesav": [114, 115], "save_fram": [114, 115, 116], "databas": [114, 115], "horseracingdb": [114, 115, 117], "image_util": [114, 115], "decode_img": [114, 115, 118], "encode_img": [114, 115, 118], "mask_util": [114, 115], "decode_mask": [114, 115, 119], "encode_mask": [114, 115, 119], "get_masks_for_homograhi": [114, 115, 119], "get_rail_mask": [114, 115, 119], "get_rail_pole_mask": [114, 115, 119], "to_mask": [114, 115, 119], "convert_to_excel": [115, 120], "get_fp": [115, 120], "get_scene_classification_results_from_cach": [115, 120], "load_fram": [115, 120], "make_result_dir": [115, 120], "select_vid_nam": [115, 120], "create_dir": [114, 115, 120], "get_data_from_databas": [114, 115, 120], "get_directori": [114, 115, 120], "import_subsequences_result": [114, 115, 120], "video_util": [114, 115, 120], "find_fp": [114, 115, 121], "load_vid": [114, 115, 120, 121], "connection_param": 117, "host": 117, "114": 117, "25": 117, "239": 117, "password": 117, "ypxvz6vrskq8tnna": 117, "port": 117, "27017": 117, "usernam": 117, "img_str": 118, "img": [95, 96, 118], "enc_mask": 119, "rail_mask_path": 119, "rail_pole_mask_path": 119, "semantic_mask_path": 119, "start_fram": [119, 121], "end_fram": [119, 121], "read": [119, 121], "rail": [105, 106, 119], "memori": [119, 120, 121], "assembl": 119, "per": 119, "frame": [95, 98, 104, 106, 108, 109, 110, 119, 120, 121], "optic": 119, "flow": 119, "estim": 119, "rle_path": 119, "finish_fram": 119, "rle_str": 119, "mask_siz": 119, "obj_bbox": 119, "frame_s": 119, "excel": 120, "vid_nam": 120, "fp": [120, 121], "out": 120, "extens": 120, "csv": 120, "start": [98, 110, 120, 121], "end": [98, 110, 120, 121], "camera": [98, 110, 120], "chang": [98, 109, 110, 120], "particular": [103, 109, 120], "exclud": 120, "doe": 120, "directory_list": 120, "connect": [108, 109, 110, 120], "race": [108, 109, 110, 120], "info": 120, "took": 120, "successfulli": 120, "finish": 120, "race_info": 120, "vid_path": 121, "actual": 121, "frame_step": 121, "pleas": 121, "doc": 121, "understand": 121, "featuredataset": [94, 95, 114], "all_img": 95, "all_jk_mask": 95, "all_box": 95, "all_frame_obj": 95, "inp_siz": 95, "collate_fn": [94, 95], "batch_data": 95, "preprocess": [94, 95, 97, 99], "feat_agg_path": 95, "gcn_path": 95, "f_dim": 95, "k1": 95, "k_at_hop": 95, "active_connect": 95, "dist_metr": 95, "batch_siz": [95, 100], "n_worker": 95, "pin_memori": 95, "extract_clusters_from_matrix": [94, 95], "pred": [95, 103], "obj_mask": 95, "frame_obj": 95, "one_hop_idc": [95, 96], "unique_nodes_list": 95, "int64": 95, "n_node": 95, "get_feats_and_graph": [94, 95], "all_mask": 95, "all_bbox": 95, "neighbor": 95, "batch_bgr_fram": 95, "belong": [95, 108, 109], "batch_mask": 95, "batch_bbox": 95, "batch_frame_obj": 95, "feat": 95, "graph": 95, "graphdataset": [94, 95, 114], "all_feat": 95, "all_graph": 95, "get_ips_of_node_i": [94, 95], "node_i": 95, "frame_featur": 95, "frame_graph": 95, "construct": 95, "pivot": 95, "subgraph": 95, "node": 95, "featureaggreg": [94, 96, 114], "feat_dim": 96, "create_hidden_lay": [94, 96], "in_dim": 96, "out_dim": 96, "b": [96, 108], "gcn": [94, 96, 114], "graphconv": [94, 96, 114], "agg": 96, "meanaggreg": [94, 96, 114], "find_start_end_cc": [97, 98, 114], "scene": 98, "classifici": 98, "intermedi": 98, "sceneclassificationpredictor": [97, 99, 114], "encoder_path": 99, "decoder_path": 99, "clear": [97, 99], "video_path": 99, "frames_indices_lst": 99, "use_cach": 99, "crossentropyloss": [97, 100, 114], "lstmdecod": [97, 100, 114], "input_dim": 100, "num_lstm_lay": 100, "lstm_hidden": 100, "fc_dim": 100, "56": 100, "dropout_prob": 100, "timestep": 100, "resnetencod": [97, 100, 114], "resnet_deepth": 100, "34": 100, "fc_hidden1": 100, "fc_hidden2": 100, "output_dim": 100, "x_3d": 100, "log_softmax": [97, 100, 114], "softmax": [97, 100, 114], "xceptionmodel": [101, 102, 114], "input_imag": 102, "reus": 102, "data_format": 102, "channels_last": 102, "aspp_output": 102, "low_level_featur": 102, "concat_feature_s": 102, "48": 102, "final_feature_s": 102, "n_class": [102, 103], "relu_separable_bn_block": [101, 102, 114], "filter": 102, "dilation_r": 102, "name_prefix": 102, "relu": 102, "network_path": [103, 104, 106], "channel": 103, "img_row": 103, "112": 103, "img_col": 103, "network": [103, 109], "restor": [101, 103], "amount": 103, "optimum": 103, "35": 103, "x_test": 103, "nx": 103, "ny": 103, "model_path": 103, "session": 103, "get_mask": [101, 104, 106], "pole": [105, 106], "detectron2": 105, "few": 105, "line": 105, "7": [106, 110], "race_track": 106, "jockey_hors": 106, "foreground": 106, "grass": 106, "combin": 106, "hors": 106, "light": 106, "overlai": 106, "tv": 106, "broadcast": 106, "check_jump_gp": [107, 108, 114], "gp1": 108, "gp2": 108, "subsequ": [108, 109, 110], "detected_box": [108, 109], "overlap_thr": 108, "camchang": [108, 110], "check": [108, 110], "ani": [108, 109], "jump": 108, "subrac": [108, 109, 110], "check_jump_seq": [107, 108, 114], "sq": 108, "too": 108, "fast": 108, "time": 108, "gradral": 108, "move": 108, "spatial": 108, "small": 108, "And": 108, "gradual": 108, "becom": 108, "larger": 108, "reject": 108, "unexpectedli": 108, "larg": 108, "displac": [108, 109], "check_overlap_gp": [107, 108, 114], "g1": 108, "g2": 108, "dc": 108, "subsequnc": [108, 110], "merg": [108, 110], "see": 108, "switch": [108, 110], "happen": [108, 110], "compute_group_id": [107, 108, 114], "subseq_ids_scor": [108, 110], "id": [108, 110], "match_with_triplet_saddlecloth": [107, 108, 114], "triplet_features_cap": [108, 110], "triplet_features_jockei": [108, 110], "jockey_cap_rel": [108, 110], "divid": 108, "mean": [108, 110], "triplet": [108, 109, 110], "separ": 108, "matchlist_step": 108, "term": 108, "prioriti": 108, "form": 108, "join": [108, 109, 110], "trajectori": 108, "merge_group": [107, 108, 114], "insert": 108, "search_match_with_id": [107, 108, 114], "mlist": 108, "triplet_mean_seq": 108, "sort_list_by_col": [107, 108, 114], "mylist": 108, "sort": 108, "box2im": [107, 109, 114], "get_dist_change_input": [107, 109, 114], "cb1": 109, "cb2": 109, "dist": 109, "get_trajectori": [107, 109, 114], "algorithm": 109, "proceduc": 109, "previou": 109, "calcul": 109, "weigth": 109, "y": 109, "direct": 109, "discard": 109, "unwant": 109, "min": 109, "cost": [109, 110], "criteria": 109, "break": [109, 110], "initi": [109, 110], "certain": 109, "across": 109, "known": 109, "clean": 109, "triplet_feature_to_list": [107, 109, 114], "feat_npi": 109, "total": 109, "feature_vector_s": 109, "10000": 109, "8000": 109, "2048": 109, "vector": [109, 110], "still": 109, "old": 109, "feat_list": 109, "arrang": 109, "break_subsequ": [107, 110, 114], "selected_result": 110, "break_interv": 110, "break_trip_thr": 110, "f1": 110, "f2": 110, "cap1_id": 110, "cap2_id": 110, "dx": 110, "dy": 110, "num_pair": 110, "show": 110, "cap1": 110, "frame1": 110, "cap2": 110, "frame2": 110, "relev": 110, "smaller": 110, "better": 110, "record": 110, "relationship": 110, "scan": 110, "through": 110, "report": 110, "greater": 110, "than": 110, "broken": 110, "init_interv": 110, "trip_thr": 110, "wihtin": 110, "portion": 110, "interv": 110, "subsequnec": 110, "usual": 110, "kranji": 110, "hvt": 110, "stt": 110, "below": 110, "specifc": 110, "tail": 110, "link_subsequ": [107, 110, 114], "time_diff": 110, "link": 110, "linkag": 110, "consid": 110, "frm_diff_id": 110, "now": 110, "capid": 110, "gcncluster": [112, 114], "gcnpredict": [94, 114], "resnet_lstm": [97, 114], "deeplab": [101, 103, 114], "generate_rail_mask": [101, 114], "generate_rail_pol": [101, 114], "generate_semantic_mask": [101, 114], "final_track": [107, 114], "find_trajectori": [107, 114], "initial_track": [107, 114]}, "objects": {"": [[0, 0, 0, "-", "Detection"], [94, 0, 0, "-", "GCNClustering"], [97, 0, 0, "-", "SceneClassifier"], [101, 0, 0, "-", "Segmentation"], [107, 0, 0, "-", "Tracking"], [111, 0, 0, "-", "config"], [113, 0, 0, "-", "main"], [115, 0, 0, "-", "util"]], "Detection": [[1, 0, 0, "-", "detect_cap_jockey_saddlecloth"], [2, 0, 0, "-", "maskrcnn_benchmark"], [92, 0, 0, "-", "predictor"]], "Detection.detect_cap_jockey_saddlecloth": [[1, 1, 1, "", "detect_cap_jockey_saddlecloth"]], "Detection.maskrcnn_benchmark": [[3, 0, 0, "-", "config"], [20, 0, 0, "-", "engine"], [23, 0, 0, "-", "layers"], [31, 0, 0, "-", "modeling"], [70, 0, 0, "-", "solver"], [73, 0, 0, "-", "structures"], [78, 0, 0, "-", "utils"]], "Detection.maskrcnn_benchmark.config": [[4, 0, 0, "-", "defaults"], [5, 0, 0, "-", "paths_catalog"]], "Detection.maskrcnn_benchmark.config.paths_catalog": [[5, 2, 1, "", "DatasetCatalog"], [5, 2, 1, "", "ModelCatalog"]], "Detection.maskrcnn_benchmark.config.paths_catalog.DatasetCatalog": [[5, 3, 1, "", "DATASETS"], [5, 3, 1, "", "DATA_DIR"], [5, 4, 1, "", "get"]], "Detection.maskrcnn_benchmark.config.paths_catalog.ModelCatalog": [[5, 3, 1, "", "C2_DETECTRON_MODELS"], [5, 3, 1, "", "C2_DETECTRON_SUFFIX"], [5, 3, 1, "", "C2_IMAGENET_MODELS"], [5, 3, 1, "", "S3_C2_DETECTRON_URL"], [5, 4, 1, "", "get"], [5, 4, 1, "", "get_c2_detectron_12_2017_baselines"], [5, 4, 1, "", "get_c2_imagenet_pretrained"]], "Detection.maskrcnn_benchmark.data": [[9, 0, 0, "-", "datasets"]], "Detection.maskrcnn_benchmark.data.datasets": [[9, 2, 1, "", "COCODataset"], [9, 2, 1, "", "ConcatDataset"], [10, 0, 0, "-", "coco"], [11, 0, 0, "-", "concat_dataset"], [12, 0, 0, "-", "list_dataset"]], "Detection.maskrcnn_benchmark.data.datasets.COCODataset": [[9, 4, 1, "", "get_img_info"]], "Detection.maskrcnn_benchmark.data.datasets.ConcatDataset": [[9, 3, 1, "", "cumulative_sizes"], [9, 3, 1, "", "datasets"], [9, 4, 1, "", "get_idxs"], [9, 4, 1, "", "get_img_info"]], "Detection.maskrcnn_benchmark.data.datasets.coco": [[10, 2, 1, "", "COCODataset"]], "Detection.maskrcnn_benchmark.data.datasets.coco.COCODataset": [[10, 4, 1, "", "get_img_info"]], "Detection.maskrcnn_benchmark.data.datasets.concat_dataset": [[11, 2, 1, "", "ConcatDataset"]], "Detection.maskrcnn_benchmark.data.datasets.concat_dataset.ConcatDataset": [[11, 3, 1, "", "cumulative_sizes"], [11, 3, 1, "", "datasets"], [11, 4, 1, "", "get_idxs"], [11, 4, 1, "", "get_img_info"]], "Detection.maskrcnn_benchmark.data.datasets.list_dataset": [[12, 2, 1, "", "ListDataset"]], "Detection.maskrcnn_benchmark.data.datasets.list_dataset.ListDataset": [[12, 4, 1, "", "get_img_info"]], "Detection.maskrcnn_benchmark.engine": [[21, 0, 0, "-", "inference"]], "Detection.maskrcnn_benchmark.engine.inference": [[21, 2, 1, "", "COCOResults"], [21, 1, 1, "", "check_expected_results"], [21, 1, 1, "", "compute_on_dataset"], [21, 1, 1, "", "evaluate_box_proposals"], [21, 1, 1, "", "evaluate_predictions_on_coco"], [21, 1, 1, "", "inference"], [21, 1, 1, "", "prepare_for_coco_detection"], [21, 1, 1, "", "prepare_for_coco_segmentation"]], "Detection.maskrcnn_benchmark.engine.inference.COCOResults": [[21, 3, 1, "", "METRICS"], [21, 4, 1, "", "update"]], "Detection.maskrcnn_benchmark.layers": [[23, 2, 1, "", "Conv2d"], [23, 2, 1, "", "ConvTranspose2d"], [23, 2, 1, "", "FrozenBatchNorm2d"], [23, 2, 1, "", "ROIAlign"], [23, 2, 1, "", "ROIPool"], [24, 0, 0, "-", "batch_norm"], [23, 1, 1, "", "interpolate"], [25, 0, 0, "-", "l2_loss"], [26, 0, 0, "-", "misc"], [27, 0, 0, "-", "nms"], [28, 0, 0, "-", "roi_align"], [29, 0, 0, "-", "roi_pool"], [30, 0, 0, "-", "smooth_l1_loss"]], "Detection.maskrcnn_benchmark.layers.Conv2d": [[23, 3, 1, "", "bias"], [23, 3, 1, "", "dilation"], [23, 4, 1, "", "forward"], [23, 3, 1, "", "groups"], [23, 3, 1, "", "kernel_size"], [23, 3, 1, "", "out_channels"], [23, 3, 1, "", "output_padding"], [23, 3, 1, "", "padding"], [23, 3, 1, "", "padding_mode"], [23, 3, 1, "", "stride"], [23, 3, 1, "", "transposed"], [23, 3, 1, "", "weight"]], "Detection.maskrcnn_benchmark.layers.ConvTranspose2d": [[23, 3, 1, "", "bias"], [23, 3, 1, "", "dilation"], [23, 4, 1, "", "forward"], [23, 3, 1, "", "groups"], [23, 3, 1, "", "kernel_size"], [23, 3, 1, "", "out_channels"], [23, 3, 1, "", "output_padding"], [23, 3, 1, "", "padding"], [23, 3, 1, "", "padding_mode"], [23, 3, 1, "", "stride"], [23, 3, 1, "", "transposed"], [23, 3, 1, "", "weight"]], "Detection.maskrcnn_benchmark.layers.FrozenBatchNorm2d": [[23, 4, 1, "", "forward"], [23, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.layers.ROIAlign": [[23, 4, 1, "", "forward"], [23, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.layers.ROIPool": [[23, 4, 1, "", "forward"], [23, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.layers.batch_norm": [[24, 2, 1, "", "FrozenBatchNorm2d"]], "Detection.maskrcnn_benchmark.layers.batch_norm.FrozenBatchNorm2d": [[24, 4, 1, "", "forward"], [24, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.layers.l2_loss": [[25, 1, 1, "", "l2_loss"]], "Detection.maskrcnn_benchmark.layers.misc": [[26, 2, 1, "", "Conv2d"], [26, 2, 1, "", "ConvTranspose2d"], [26, 1, 1, "", "interpolate"]], "Detection.maskrcnn_benchmark.layers.misc.Conv2d": [[26, 3, 1, "", "bias"], [26, 3, 1, "", "dilation"], [26, 4, 1, "", "forward"], [26, 3, 1, "", "groups"], [26, 3, 1, "", "kernel_size"], [26, 3, 1, "", "out_channels"], [26, 3, 1, "", "output_padding"], [26, 3, 1, "", "padding"], [26, 3, 1, "", "padding_mode"], [26, 3, 1, "", "stride"], [26, 3, 1, "", "training"], [26, 3, 1, "", "transposed"], [26, 3, 1, "", "weight"]], "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d": [[26, 3, 1, "", "bias"], [26, 3, 1, "", "dilation"], [26, 4, 1, "", "forward"], [26, 3, 1, "", "groups"], [26, 3, 1, "", "kernel_size"], [26, 3, 1, "", "out_channels"], [26, 3, 1, "", "output_padding"], [26, 3, 1, "", "padding"], [26, 3, 1, "", "padding_mode"], [26, 3, 1, "", "stride"], [26, 3, 1, "", "training"], [26, 3, 1, "", "transposed"], [26, 3, 1, "", "weight"]], "Detection.maskrcnn_benchmark.layers.roi_align": [[28, 2, 1, "", "ROIAlign"], [28, 1, 1, "", "roi_align"]], "Detection.maskrcnn_benchmark.layers.roi_align.ROIAlign": [[28, 4, 1, "", "forward"], [28, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.layers.roi_pool": [[29, 2, 1, "", "ROIPool"], [29, 1, 1, "", "roi_pool"]], "Detection.maskrcnn_benchmark.layers.roi_pool.ROIPool": [[29, 4, 1, "", "forward"], [29, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.layers.smooth_l1_loss": [[30, 1, 1, "", "smooth_l1_loss"]], "Detection.maskrcnn_benchmark.modeling.backbone": [[34, 0, 0, "-", "fpn"], [35, 0, 0, "-", "resnet"]], "Detection.maskrcnn_benchmark.modeling.backbone.fpn": [[34, 2, 1, "", "FPN"], [34, 2, 1, "", "LastLevelMaxPool"]], "Detection.maskrcnn_benchmark.modeling.backbone.fpn.FPN": [[34, 4, 1, "", "forward"], [34, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.backbone.fpn.LastLevelMaxPool": [[34, 4, 1, "", "forward"], [34, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.backbone.resnet": [[35, 2, 1, "", "BottleneckWithFixedBatchNorm"], [35, 2, 1, "", "ResNet"], [35, 2, 1, "", "ResNetHead"], [35, 2, 1, "", "StageSpec"], [35, 2, 1, "", "StemWithFixedBatchNorm"]], "Detection.maskrcnn_benchmark.modeling.backbone.resnet.BottleneckWithFixedBatchNorm": [[35, 4, 1, "", "forward"], [35, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.backbone.resnet.ResNet": [[35, 4, 1, "", "forward"], [35, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.backbone.resnet.ResNetHead": [[35, 4, 1, "", "forward"], [35, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.backbone.resnet.StageSpec": [[35, 3, 1, "", "block_count"], [35, 3, 1, "", "index"], [35, 3, 1, "", "return_features"]], "Detection.maskrcnn_benchmark.modeling.backbone.resnet.StemWithFixedBatchNorm": [[35, 4, 1, "", "forward"], [35, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling": [[36, 0, 0, "-", "balanced_positive_negative_sampler"], [37, 0, 0, "-", "box_coder"], [41, 0, 0, "-", "matcher"], [42, 0, 0, "-", "poolers"], [43, 0, 0, "-", "registry"], [44, 0, 0, "-", "roi_heads"], [64, 0, 0, "-", "rpn"], [69, 0, 0, "-", "utils"]], "Detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler": [[36, 2, 1, "", "BalancedPositiveNegativeSampler"]], "Detection.maskrcnn_benchmark.modeling.box_coder": [[37, 2, 1, "", "BoxCoder"]], "Detection.maskrcnn_benchmark.modeling.box_coder.BoxCoder": [[37, 4, 1, "", "decode"], [37, 4, 1, "", "encode"]], "Detection.maskrcnn_benchmark.modeling.matcher": [[41, 2, 1, "", "Matcher"]], "Detection.maskrcnn_benchmark.modeling.matcher.Matcher": [[41, 3, 1, "", "BELOW_LOW_THRESHOLD"], [41, 3, 1, "", "BETWEEN_THRESHOLDS"], [41, 4, 1, "", "set_low_quality_matches_"]], "Detection.maskrcnn_benchmark.modeling.poolers": [[42, 2, 1, "", "LevelMapper"], [42, 2, 1, "", "Pooler"]], "Detection.maskrcnn_benchmark.modeling.poolers.Pooler": [[42, 4, 1, "", "convert_to_roi_format"], [42, 4, 1, "", "forward"], [42, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads": [[45, 0, 0, "-", "box_head"], [51, 0, 0, "-", "mask_head"], [57, 0, 0, "-", "maskiou_head"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head": [[47, 0, 0, "-", "inference"], [48, 0, 0, "-", "loss"], [50, 0, 0, "-", "roi_box_predictors"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference": [[47, 2, 1, "", "PostProcessor"], [47, 1, 1, "", "make_roi_box_post_processor"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.PostProcessor": [[47, 4, 1, "", "filter_results"], [47, 4, 1, "", "forward"], [47, 4, 1, "", "prepare_boxlist"], [47, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss": [[48, 2, 1, "", "FastRCNNLossComputation"], [48, 1, 1, "", "make_roi_box_loss_evaluator"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.FastRCNNLossComputation": [[48, 4, 1, "", "match_targets_to_proposals"], [48, 4, 1, "", "prepare_targets"], [48, 4, 1, "", "subsample"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors": [[50, 2, 1, "", "FPNPredictor"], [50, 2, 1, "", "FastRCNNPredictor"], [50, 1, 1, "", "make_roi_box_predictor"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.FPNPredictor": [[50, 4, 1, "", "forward"], [50, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.FastRCNNPredictor": [[50, 4, 1, "", "forward"], [50, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head": [[52, 0, 0, "-", "inference"], [53, 0, 0, "-", "loss"], [56, 0, 0, "-", "roi_mask_predictors"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference": [[52, 2, 1, "", "MaskPostProcessor"], [52, 2, 1, "", "MaskPostProcessorCOCOFormat"], [52, 2, 1, "", "Masker"], [52, 1, 1, "", "expand_boxes"], [52, 1, 1, "", "expand_masks"], [52, 1, 1, "", "make_roi_mask_post_processor"], [52, 1, 1, "", "paste_mask_in_image"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.MaskPostProcessor": [[52, 4, 1, "", "forward"], [52, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.MaskPostProcessorCOCOFormat": [[52, 4, 1, "", "forward"], [52, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker": [[52, 4, 1, "", "forward_single_image"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss": [[53, 2, 1, "", "MaskRCNNLossComputation"], [53, 1, 1, "", "make_roi_mask_loss_evaluator"], [53, 1, 1, "", "project_masks_on_boxes"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss.MaskRCNNLossComputation": [[53, 4, 1, "", "match_targets_to_proposals"], [53, 4, 1, "", "prepare_targets"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors": [[56, 2, 1, "", "MaskRCNNC4Predictor"], [56, 1, 1, "", "make_roi_mask_predictor"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors.MaskRCNNC4Predictor": [[56, 4, 1, "", "forward"], [56, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head": [[58, 0, 0, "-", "inference"], [59, 0, 0, "-", "loss"], [60, 0, 0, "-", "maskiou_head"], [61, 0, 0, "-", "roi_maskiou_feature_extractors"], [62, 0, 0, "-", "roi_maskiou_predictors"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference": [[58, 2, 1, "", "MaskIoUPostProcessor"], [58, 1, 1, "", "make_roi_maskiou_post_processor"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference.MaskIoUPostProcessor": [[58, 4, 1, "", "forward"], [58, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss": [[59, 2, 1, "", "MaskIoULossComputation"], [59, 1, 1, "", "make_roi_maskiou_loss_evaluator"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head": [[60, 2, 1, "", "ROIMaskIoUHead"], [60, 1, 1, "", "build_roi_maskiou_head"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head.ROIMaskIoUHead": [[60, 4, 1, "", "forward"], [60, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors": [[61, 2, 1, "", "MaskIoUFeatureExtractor"], [61, 1, 1, "", "make_roi_maskiou_feature_extractor"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors.MaskIoUFeatureExtractor": [[61, 4, 1, "", "forward"], [61, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors": [[62, 2, 1, "", "MaskIoUPredictor"], [62, 1, 1, "", "make_roi_maskiou_predictor"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors.MaskIoUPredictor": [[62, 4, 1, "", "forward"], [62, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.rpn": [[65, 0, 0, "-", "anchor_generator"], [66, 0, 0, "-", "inference"], [67, 0, 0, "-", "loss"]], "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator": [[65, 2, 1, "", "AnchorGenerator"], [65, 2, 1, "", "BufferList"], [65, 1, 1, "", "generate_anchors"], [65, 1, 1, "", "make_anchor_generator"]], "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.AnchorGenerator": [[65, 4, 1, "", "add_visibility_to"], [65, 4, 1, "", "forward"], [65, 4, 1, "", "grid_anchors"], [65, 4, 1, "", "num_anchors_per_location"], [65, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.BufferList": [[65, 4, 1, "", "extend"], [65, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.rpn.inference": [[66, 2, 1, "", "RPNPostProcessor"], [66, 1, 1, "", "make_rpn_postprocessor"]], "Detection.maskrcnn_benchmark.modeling.rpn.inference.RPNPostProcessor": [[66, 4, 1, "", "add_gt_proposals"], [66, 4, 1, "", "forward"], [66, 4, 1, "", "forward_for_single_feature_map"], [66, 4, 1, "", "select_over_all_levels"], [66, 3, 1, "", "training"]], "Detection.maskrcnn_benchmark.modeling.rpn.loss": [[67, 2, 1, "", "RPNLossComputation"], [67, 1, 1, "", "make_rpn_loss_evaluator"]], "Detection.maskrcnn_benchmark.modeling.rpn.loss.RPNLossComputation": [[67, 4, 1, "", "match_targets_to_anchors"], [67, 4, 1, "", "prepare_targets"]], "Detection.maskrcnn_benchmark.modeling.utils": [[69, 1, 1, "", "cat"]], "Detection.maskrcnn_benchmark.solver": [[71, 0, 0, "-", "build"], [72, 0, 0, "-", "lr_scheduler"]], "Detection.maskrcnn_benchmark.solver.build": [[71, 1, 1, "", "make_lr_scheduler"], [71, 1, 1, "", "make_optimizer"]], "Detection.maskrcnn_benchmark.solver.lr_scheduler": [[72, 2, 1, "", "WarmupMultiStepLR"]], "Detection.maskrcnn_benchmark.solver.lr_scheduler.WarmupMultiStepLR": [[72, 4, 1, "", "get_lr"]], "Detection.maskrcnn_benchmark.structures": [[74, 0, 0, "-", "bounding_box"], [75, 0, 0, "-", "boxlist_ops"], [76, 0, 0, "-", "image_list"], [77, 0, 0, "-", "segmentation_mask"]], "Detection.maskrcnn_benchmark.structures.bounding_box": [[74, 2, 1, "", "BoxList"]], "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList": [[74, 4, 1, "", "add_field"], [74, 4, 1, "", "area"], [74, 4, 1, "", "clip_to_image"], [74, 4, 1, "", "convert"], [74, 4, 1, "", "copy_with_fields"], [74, 4, 1, "", "crop"], [74, 4, 1, "", "fields"], [74, 4, 1, "", "get_field"], [74, 4, 1, "", "has_field"], [74, 4, 1, "", "resize"], [74, 4, 1, "", "to"], [74, 4, 1, "", "transpose"]], "Detection.maskrcnn_benchmark.structures.boxlist_ops": [[75, 1, 1, "", "boxlist_iou"], [75, 1, 1, "", "boxlist_nms"], [75, 1, 1, "", "cat_boxlist"], [75, 1, 1, "", "remove_small_boxes"]], "Detection.maskrcnn_benchmark.structures.image_list": [[76, 2, 1, "", "ImageList"], [76, 1, 1, "", "to_image_list"]], "Detection.maskrcnn_benchmark.structures.image_list.ImageList": [[76, 4, 1, "", "to"]], "Detection.maskrcnn_benchmark.structures.segmentation_mask": [[77, 2, 1, "", "Mask"], [77, 2, 1, "", "Polygons"], [77, 2, 1, "", "SegmentationMask"]], "Detection.maskrcnn_benchmark.structures.segmentation_mask.Mask": [[77, 4, 1, "", "crop"], [77, 4, 1, "", "resize"], [77, 4, 1, "", "transpose"]], "Detection.maskrcnn_benchmark.structures.segmentation_mask.Polygons": [[77, 4, 1, "", "convert"], [77, 4, 1, "", "crop"], [77, 4, 1, "", "resize"], [77, 4, 1, "", "transpose"]], "Detection.maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask": [[77, 4, 1, "", "crop"], [77, 4, 1, "", "resize"], [77, 4, 1, "", "to"], [77, 4, 1, "", "transpose"]], "Detection.maskrcnn_benchmark.utils": [[79, 0, 0, "-", "c2_model_loading"], [80, 0, 0, "-", "checkpoint"], [81, 0, 0, "-", "collect_env"], [82, 0, 0, "-", "comm"], [83, 0, 0, "-", "cv2_util"], [84, 0, 0, "-", "env"], [85, 0, 0, "-", "imports"], [86, 0, 0, "-", "logger"], [87, 0, 0, "-", "metric_logger"], [88, 0, 0, "-", "miscellaneous"], [89, 0, 0, "-", "model_serialization"], [90, 0, 0, "-", "model_zoo"], [91, 0, 0, "-", "registry"]], "Detection.maskrcnn_benchmark.utils.c2_model_loading": [[79, 1, 1, "", "load_c2_format"], [79, 1, 1, "", "load_resnet_c2_format"]], "Detection.maskrcnn_benchmark.utils.checkpoint": [[80, 2, 1, "", "Checkpointer"], [80, 2, 1, "", "DetectronCheckpointer"]], "Detection.maskrcnn_benchmark.utils.checkpoint.Checkpointer": [[80, 4, 1, "", "get_checkpoint_file"], [80, 4, 1, "", "has_checkpoint"], [80, 4, 1, "", "load"], [80, 4, 1, "", "save"], [80, 4, 1, "", "tag_last_checkpoint"]], "Detection.maskrcnn_benchmark.utils.collect_env": [[81, 1, 1, "", "collect_env_info"], [81, 1, 1, "", "get_pil_version"]], "Detection.maskrcnn_benchmark.utils.comm": [[82, 1, 1, "", "get_rank"], [82, 1, 1, "", "get_world_size"], [82, 1, 1, "", "is_main_process"], [82, 1, 1, "", "scatter_gather"], [82, 1, 1, "", "synchronize"]], "Detection.maskrcnn_benchmark.utils.cv2_util": [[83, 1, 1, "", "findContours"]], "Detection.maskrcnn_benchmark.utils.env": [[84, 1, 1, "", "setup_custom_environment"], [84, 1, 1, "", "setup_environment"]], "Detection.maskrcnn_benchmark.utils.imports": [[85, 1, 1, "", "import_file"]], "Detection.maskrcnn_benchmark.utils.logger": [[86, 1, 1, "", "setup_logger"]], "Detection.maskrcnn_benchmark.utils.metric_logger": [[87, 2, 1, "", "MetricLogger"], [87, 2, 1, "", "SmoothedValue"]], "Detection.maskrcnn_benchmark.utils.metric_logger.MetricLogger": [[87, 4, 1, "", "update"]], "Detection.maskrcnn_benchmark.utils.metric_logger.SmoothedValue": [[87, 5, 1, "", "avg"], [87, 5, 1, "", "global_avg"], [87, 5, 1, "", "median"], [87, 4, 1, "", "update"]], "Detection.maskrcnn_benchmark.utils.miscellaneous": [[88, 1, 1, "", "mkdir"]], "Detection.maskrcnn_benchmark.utils.model_serialization": [[89, 1, 1, "", "align_and_update_state_dicts"], [89, 1, 1, "", "load_state_dict"], [89, 1, 1, "", "strip_prefix_if_present"]], "Detection.maskrcnn_benchmark.utils.model_zoo": [[90, 1, 1, "", "cache_url"]], "Detection.maskrcnn_benchmark.utils.registry": [[91, 2, 1, "", "Registry"]], "Detection.maskrcnn_benchmark.utils.registry.Registry": [[91, 4, 1, "", "register"]], "Detection.predictor": [[92, 2, 1, "", "MaskScoringRCNN"], [92, 2, 1, "", "Resize"]], "Detection.predictor.MaskScoringRCNN": [[92, 3, 1, "", "CATEGORIES"], [92, 4, 1, "", "build_transform"], [92, 4, 1, "", "compute_prediction"], [92, 4, 1, "", "get_result_by_frame"], [92, 4, 1, "", "select_top_predictions"]], "Detection.predictor.Resize": [[92, 4, 1, "", "get_size"]], "GCNClustering": [[95, 0, 0, "-", "GCNPrediction"], [96, 0, 0, "-", "models"]], "GCNClustering.GCNPrediction": [[95, 2, 1, "", "FeatureDataset"], [95, 2, 1, "", "GCNCluster"], [95, 2, 1, "", "GraphDataset"]], "GCNClustering.GCNPrediction.FeatureDataset": [[95, 4, 1, "", "collate_fn"], [95, 4, 1, "", "preprocess"]], "GCNClustering.GCNPrediction.GCNCluster": [[95, 4, 1, "", "extract_clusters_from_matrix"], [95, 4, 1, "", "get_feats_and_graph"], [95, 4, 1, "", "predict"]], "GCNClustering.GCNPrediction.GraphDataset": [[95, 4, 1, "", "collate_fn"], [95, 4, 1, "", "get_ips_of_node_i"]], "GCNClustering.models": [[96, 2, 1, "", "FeatureAggregator"], [96, 2, 1, "", "GCN"], [96, 2, 1, "", "GraphConv"], [96, 2, 1, "", "MeanAggregator"]], "GCNClustering.models.FeatureAggregator": [[96, 4, 1, "", "create_hidden_layer"], [96, 4, 1, "", "forward"], [96, 3, 1, "", "training"]], "GCNClustering.models.GCN": [[96, 4, 1, "", "forward"], [96, 3, 1, "", "training"]], "GCNClustering.models.GraphConv": [[96, 4, 1, "", "forward"], [96, 3, 1, "", "training"]], "GCNClustering.models.MeanAggregator": [[96, 4, 1, "", "forward"], [96, 3, 1, "", "training"]], "SceneClassifier": [[98, 0, 0, "-", "predict"], [99, 0, 0, "-", "predictor"], [100, 0, 0, "-", "resnet_lstm"]], "SceneClassifier.predict": [[98, 1, 1, "", "find_start_end_cc"]], "SceneClassifier.predictor": [[99, 2, 1, "", "SceneClassificationPredictor"]], "SceneClassifier.predictor.SceneClassificationPredictor": [[99, 4, 1, "", "clear"], [99, 4, 1, "", "predict"], [99, 4, 1, "", "preprocess"]], "SceneClassifier.resnet_lstm": [[100, 1, 1, "", "CrossEntropyLoss"], [100, 2, 1, "", "LSTMDecoder"], [100, 2, 1, "", "ResNetEncoder"], [100, 1, 1, "", "log_softmax"], [100, 1, 1, "", "softmax"]], "SceneClassifier.resnet_lstm.LSTMDecoder": [[100, 4, 1, "", "forward"], [100, 3, 1, "", "training"]], "SceneClassifier.resnet_lstm.ResNetEncoder": [[100, 4, 1, "", "forward"], [100, 3, 1, "", "training"]], "Segmentation": [[102, 0, 0, "-", "DeepLab"], [103, 0, 0, "-", "Model"], [104, 0, 0, "-", "generate_rail_mask"], [105, 0, 0, "-", "generate_rail_pole"], [106, 0, 0, "-", "generate_semantic_mask"]], "Segmentation.DeepLab": [[102, 1, 1, "", "XceptionModel"], [102, 1, 1, "", "decoder"], [102, 1, 1, "", "deeplab"], [102, 1, 1, "", "relu_separable_bn_block"]], "Segmentation.Model": [[103, 2, 1, "", "Model"]], "Segmentation.Model.Model": [[103, 4, 1, "", "predict"], [103, 4, 1, "", "restore"]], "Segmentation.generate_rail_mask": [[104, 2, 1, "", "Segmentation"], [104, 1, 1, "", "generate_rail_mask"]], "Segmentation.generate_rail_mask.Segmentation": [[104, 4, 1, "", "get_mask"]], "Segmentation.generate_rail_pole": [[105, 1, 1, "", "generate_rail_pole"]], "Segmentation.generate_semantic_mask": [[106, 2, 1, "", "Segmentation"], [106, 1, 1, "", "generate_semantic_mask"]], "Segmentation.generate_semantic_mask.Segmentation": [[106, 4, 1, "", "get_mask"]], "Tracking": [[108, 0, 0, "-", "final_tracking"], [109, 0, 0, "-", "find_trajectories"], [110, 0, 0, "-", "initial_tracking"]], "Tracking.final_tracking": [[108, 1, 1, "", "check_jump_gps"], [108, 1, 1, "", "check_jump_seqs"], [108, 1, 1, "", "check_overlap_gps"], [108, 1, 1, "", "compute_group_id"], [108, 1, 1, "", "match_with_triplet_saddlecloth"], [108, 1, 1, "", "merge_group"], [108, 1, 1, "", "search_match_with_id"], [108, 1, 1, "", "sort_list_by_col"]], "Tracking.find_trajectories": [[109, 1, 1, "", "box2im"], [109, 1, 1, "", "get_dist_change_input"], [109, 1, 1, "", "get_trajectory"], [109, 1, 1, "", "triplet_feature_to_list"]], "Tracking.initial_tracking": [[110, 1, 1, "", "break_subsequences"], [110, 1, 1, "", "initial_tracking"], [110, 1, 1, "", "link_subsequences"]], "config": [[111, 2, 1, "", "HVTConfig"], [111, 2, 1, "", "KranjiConfig"], [111, 2, 1, "", "STAWTConfig"], [111, 2, 1, "", "STTConfig"], [111, 2, 1, "", "Task"], [111, 1, 1, "", "get_model_info"], [111, 1, 1, "", "get_model_paths"]], "config.HVTConfig": [[111, 3, 1, "", "conn_thres"], [111, 3, 1, "", "scn_max"]], "config.KranjiConfig": [[111, 3, 1, "", "conn_thres"], [111, 3, 1, "", "scn_max"]], "config.STAWTConfig": [[111, 3, 1, "", "conn_thres"], [111, 3, 1, "", "scn_max"]], "config.STTConfig": [[111, 3, 1, "", "conn_thres"], [111, 3, 1, "", "scn_max"]], "config.Task": [[111, 3, 1, "", "DETECTION"], [111, 3, 1, "", "FRAMEEXTRACTOR"], [111, 3, 1, "", "OPTICALFLOW"], [111, 3, 1, "", "RAILMASK"], [111, 3, 1, "", "RAILPOLEMASK"], [111, 3, 1, "", "SCENECLASSIFY"], [111, 3, 1, "", "SEMANTICMASK"], [111, 3, 1, "", "TRACKING"]], "main": [[113, 1, 1, "", "launch_tasks"], [113, 1, 1, "", "run_horseracing"], [113, 1, 1, "", "task_functions"]], "util": [[116, 0, 0, "-", "FrameSaver"], [117, 0, 0, "-", "database"], [118, 0, 0, "-", "image_util"], [119, 0, 0, "-", "mask_util"], [120, 0, 0, "-", "result"], [121, 0, 0, "-", "video_util"]], "util.FrameSaver": [[116, 1, 1, "", "save_frame"]], "util.database": [[117, 2, 1, "", "HorseRacingDB"]], "util.image_util": [[118, 1, 1, "", "decode_img"], [118, 1, 1, "", "encode_img"]], "util.mask_util": [[119, 1, 1, "", "decode_masks"], [119, 1, 1, "", "encode_masks"], [119, 1, 1, "", "get_masks_for_homograhy"], [119, 1, 1, "", "get_rail_masks"], [119, 1, 1, "", "get_rail_pole_masks"], [119, 1, 1, "", "to_mask"]], "util.result": [[120, 2, 1, "", "Result"], [120, 1, 1, "", "create_dir"], [120, 1, 1, "", "get_data_from_database"], [120, 1, 1, "", "get_directories"], [120, 1, 1, "", "import_subsequences_results"]], "util.result.Result": [[120, 4, 1, "", "convert_to_excel"], [120, 4, 1, "", "get_fps"], [120, 4, 1, "", "get_scene_classification_results_from_cache"], [120, 4, 1, "", "load_frames"], [120, 4, 1, "", "make_result_dir"], [120, 4, 1, "", "select_vid_names"]], "util.video_util": [[121, 1, 1, "", "find_fps"], [121, 1, 1, "", "load_vid"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"]}, "titleterms": {"detect": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "packag": [0, 2, 3, 6, 9, 13, 17, 20, 23, 31, 32, 38, 44, 45, 51, 57, 64, 70, 73, 78, 94, 97, 101, 107, 115], "subpackag": [0, 2, 6, 31, 44], "submodul": [0, 3, 6, 9, 13, 17, 20, 23, 31, 32, 38, 44, 45, 51, 57, 64, 70, 73, 78, 94, 97, 101, 107, 115], "detect_cap_jockey_saddlecloth": 1, "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121], "predictor": [92, 99], "setup": 93, "content": [0, 2, 3, 6, 9, 13, 17, 20, 23, 31, 32, 38, 44, 45, 51, 57, 64, 70, 73, 78, 94, 97, 101, 107, 112, 115], "maskrcnn_benchmark": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "config": [3, 4, 5, 111], "default": 4, "paths_catalog": 5, "data": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "build": [7, 18, 71], "collate_batch": 8, "dataset": [9, 10, 11, 12], "coco": 10, "concat_dataset": 11, "list_dataset": 12, "sampler": [13, 14, 15, 16], "distribut": 14, "grouped_batch_sampl": 15, "iteration_based_batch_sampl": 16, "transform": [17, 18, 19], "engin": [20, 21, 22], "infer": [21, 47, 52, 58, 66], "trainer": 22, "layer": [23, 24, 25, 26, 27, 28, 29, 30], "batch_norm": 24, "l2_loss": 25, "misc": 26, "nm": 27, "roi_align": 28, "roi_pool": 29, "smooth_l1_loss": 30, "model": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 96, 103], "balanced_positive_negative_sampl": 36, "box_cod": 37, "matcher": 41, "pooler": 42, "registri": [43, 91], "util": [69, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 115, 116, 117, 118, 119, 120, 121], "backbon": [32, 33, 34, 35], "fpn": 34, "resnet": 35, "detector": [38, 39, 40], "generalized_rcnn": 40, "roi_head": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "box_head": [45, 46, 47, 48, 49, 50], "loss": [48, 53, 59, 67], "roi_box_feature_extractor": 49, "roi_box_predictor": 50, "mask_head": [51, 52, 53, 54, 55, 56], "roi_mask_feature_extractor": 55, "roi_mask_predictor": 56, "maskiou_head": [57, 58, 59, 60, 61, 62], "roi_maskiou_feature_extractor": 61, "roi_maskiou_predictor": 62, "rpn": [64, 65, 66, 67, 68], "anchor_gener": 65, "solver": [70, 71, 72], "lr_schedul": 72, "structur": [73, 74, 75, 76, 77], "bounding_box": 74, "boxlist_op": 75, "image_list": 76, "segmentation_mask": 77, "c2_model_load": 79, "checkpoint": 80, "collect_env": 81, "comm": 82, "cv2_util": 83, "env": 84, "import": 85, "logger": 86, "metric_logg": 87, "miscellan": 88, "model_seri": 89, "model_zoo": 90, "welcom": 112, "horseracingreleas": 112, "": 112, "document": 112, "indic": 112, "tabl": 112, "main": 113, "horserac": 114, "v2": 114, "4": 114, "framesav": 116, "databas": 117, "image_util": 118, "mask_util": 119, "result": 120, "paramt": [110, 120], "video_util": 121, "gcncluster": [94, 95, 96], "gcnpredict": 95, "sceneclassifi": [97, 98, 99, 100], "predict": 98, "resnet_lstm": 100, "segment": [101, 102, 103, 104, 105, 106], "deeplab": 102, "generate_rail_mask": 104, "generate_rail_pol": 105, "generate_semantic_mask": 106, "track": [107, 108, 109, 110], "final_track": 108, "find_trajectori": 109, "initial_track": 110}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Welcome to HorseRacingRelease\u2019s documentation!": [[112, "welcome-to-horseracingrelease-s-documentation"]], "Contents:": [[112, null]], "Indices and tables": [[112, "indices-and-tables"]], "Detection package": [[0, "detection-package"]], "Subpackages": [[0, "subpackages"], [2, "subpackages"], [6, "subpackages"], [31, "subpackages"], [44, "subpackages"]], "Submodules": [[0, "submodules"], [3, "submodules"], [6, "submodules"], [9, "submodules"], [13, "submodules"], [17, "submodules"], [20, "submodules"], [23, "submodules"], [31, "submodules"], [32, "submodules"], [38, "submodules"], [44, "submodules"], [45, "submodules"], [51, "submodules"], [57, "submodules"], [64, "submodules"], [70, "submodules"], [73, "submodules"], [78, "submodules"], [94, "submodules"], [97, "submodules"], [101, "submodules"], [107, "submodules"], [115, "submodules"]], "Module contents": [[0, "module-Detection"], [2, "module-Detection.maskrcnn_benchmark"], [3, "module-Detection.maskrcnn_benchmark.config"], [6, "module-contents"], [9, "module-Detection.maskrcnn_benchmark.data.datasets"], [13, "module-contents"], [17, "module-contents"], [20, "module-Detection.maskrcnn_benchmark.engine"], [23, "module-Detection.maskrcnn_benchmark.layers"], [31, "module-Detection.maskrcnn_benchmark.modeling"], [32, "module-contents"], [38, "module-contents"], [44, "module-Detection.maskrcnn_benchmark.modeling.roi_heads"], [45, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head"], [51, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head"], [57, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head"], [64, "module-Detection.maskrcnn_benchmark.modeling.rpn"], [70, "module-Detection.maskrcnn_benchmark.solver"], [73, "module-Detection.maskrcnn_benchmark.structures"], [78, "module-Detection.maskrcnn_benchmark.utils"], [94, "module-GCNClustering"], [97, "module-SceneClassifier"], [101, "module-Segmentation"], [107, "module-Tracking"], [115, "module-util"]], "Detection.detect_cap_jockey_saddlecloth module": [[1, "module-Detection.detect_cap_jockey_saddlecloth"]], "Detection.maskrcnn_benchmark package": [[2, "detection-maskrcnn-benchmark-package"]], "Detection.maskrcnn_benchmark.config package": [[3, "detection-maskrcnn-benchmark-config-package"]], "Detection.maskrcnn_benchmark.config.defaults module": [[4, "module-Detection.maskrcnn_benchmark.config.defaults"]], "Detection.maskrcnn_benchmark.config.paths_catalog module": [[5, "module-Detection.maskrcnn_benchmark.config.paths_catalog"]], "Detection.maskrcnn_benchmark.data package": [[6, "detection-maskrcnn-benchmark-data-package"]], "Detection.maskrcnn_benchmark.data.build module": [[7, "detection-maskrcnn-benchmark-data-build-module"]], "Detection.maskrcnn_benchmark.data.collate_batch module": [[8, "detection-maskrcnn-benchmark-data-collate-batch-module"]], "Detection.maskrcnn_benchmark.data.datasets package": [[9, "detection-maskrcnn-benchmark-data-datasets-package"]], "Detection.maskrcnn_benchmark.data.datasets.coco module": [[10, "module-Detection.maskrcnn_benchmark.data.datasets.coco"]], "Detection.maskrcnn_benchmark.data.datasets.concat_dataset module": [[11, "module-Detection.maskrcnn_benchmark.data.datasets.concat_dataset"]], "Detection.maskrcnn_benchmark.data.datasets.list_dataset module": [[12, "module-Detection.maskrcnn_benchmark.data.datasets.list_dataset"]], "Detection.maskrcnn_benchmark.data.samplers package": [[13, "detection-maskrcnn-benchmark-data-samplers-package"]], "Detection.maskrcnn_benchmark.data.samplers.distributed module": [[14, "detection-maskrcnn-benchmark-data-samplers-distributed-module"]], "Detection.maskrcnn_benchmark.data.samplers.grouped_batch_sampler module": [[15, "detection-maskrcnn-benchmark-data-samplers-grouped-batch-sampler-module"]], "Detection.maskrcnn_benchmark.data.samplers.iteration_based_batch_sampler module": [[16, "detection-maskrcnn-benchmark-data-samplers-iteration-based-batch-sampler-module"]], "Detection.maskrcnn_benchmark.data.transforms package": [[17, "detection-maskrcnn-benchmark-data-transforms-package"]], "Detection.maskrcnn_benchmark.data.transforms.build module": [[18, "detection-maskrcnn-benchmark-data-transforms-build-module"]], "Detection.maskrcnn_benchmark.data.transforms.transforms module": [[19, "detection-maskrcnn-benchmark-data-transforms-transforms-module"]], "Detection.maskrcnn_benchmark.engine package": [[20, "detection-maskrcnn-benchmark-engine-package"]], "Detection.maskrcnn_benchmark.engine.inference module": [[21, "module-Detection.maskrcnn_benchmark.engine.inference"]], "Detection.maskrcnn_benchmark.engine.trainer module": [[22, "detection-maskrcnn-benchmark-engine-trainer-module"]], "Detection.maskrcnn_benchmark.layers package": [[23, "detection-maskrcnn-benchmark-layers-package"]], "Detection.maskrcnn_benchmark.layers.batch_norm module": [[24, "module-Detection.maskrcnn_benchmark.layers.batch_norm"]], "Detection.maskrcnn_benchmark.layers.l2_loss module": [[25, "module-Detection.maskrcnn_benchmark.layers.l2_loss"]], "Detection.maskrcnn_benchmark.layers.misc module": [[26, "module-Detection.maskrcnn_benchmark.layers.misc"]], "Detection.maskrcnn_benchmark.layers.nms module": [[27, "module-Detection.maskrcnn_benchmark.layers.nms"]], "Detection.maskrcnn_benchmark.layers.roi_align module": [[28, "module-Detection.maskrcnn_benchmark.layers.roi_align"]], "Detection.maskrcnn_benchmark.layers.roi_pool module": [[29, "module-Detection.maskrcnn_benchmark.layers.roi_pool"]], "Detection.maskrcnn_benchmark.layers.smooth_l1_loss module": [[30, "module-Detection.maskrcnn_benchmark.layers.smooth_l1_loss"]], "Detection.maskrcnn_benchmark.modeling package": [[31, "detection-maskrcnn-benchmark-modeling-package"]], "Detection.maskrcnn_benchmark.modeling.backbone package": [[32, "detection-maskrcnn-benchmark-modeling-backbone-package"]], "Detection.maskrcnn_benchmark.modeling.backbone.backbone module": [[33, "detection-maskrcnn-benchmark-modeling-backbone-backbone-module"]], "Detection.maskrcnn_benchmark.modeling.backbone.fpn module": [[34, "module-Detection.maskrcnn_benchmark.modeling.backbone.fpn"]], "Detection.maskrcnn_benchmark.modeling.backbone.resnet module": [[35, "module-Detection.maskrcnn_benchmark.modeling.backbone.resnet"]], "Detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler module": [[36, "module-Detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler"]], "Detection.maskrcnn_benchmark.modeling.box_coder module": [[37, "module-Detection.maskrcnn_benchmark.modeling.box_coder"]], "Detection.maskrcnn_benchmark.modeling.detector package": [[38, "detection-maskrcnn-benchmark-modeling-detector-package"]], "Detection.maskrcnn_benchmark.modeling.detector.detectors module": [[39, "detection-maskrcnn-benchmark-modeling-detector-detectors-module"]], "Detection.maskrcnn_benchmark.modeling.detector.generalized_rcnn module": [[40, "detection-maskrcnn-benchmark-modeling-detector-generalized-rcnn-module"]], "Detection.maskrcnn_benchmark.modeling.matcher module": [[41, "module-Detection.maskrcnn_benchmark.modeling.matcher"]], "Detection.maskrcnn_benchmark.modeling.poolers module": [[42, "module-Detection.maskrcnn_benchmark.modeling.poolers"]], "Detection.maskrcnn_benchmark.modeling.registry module": [[43, "module-Detection.maskrcnn_benchmark.modeling.registry"]], "Detection.maskrcnn_benchmark.modeling.roi_heads package": [[44, "detection-maskrcnn-benchmark-modeling-roi-heads-package"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head package": [[45, "detection-maskrcnn-benchmark-modeling-roi-heads-box-head-package"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.box_head module": [[46, "detection-maskrcnn-benchmark-modeling-roi-heads-box-head-box-head-module"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference module": [[47, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss module": [[48, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_feature_extractors module": [[49, "detection-maskrcnn-benchmark-modeling-roi-heads-box-head-roi-box-feature-extractors-module"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors module": [[50, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head package": [[51, "detection-maskrcnn-benchmark-modeling-roi-heads-mask-head-package"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference module": [[52, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss module": [[53, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.mask_head module": [[54, "detection-maskrcnn-benchmark-modeling-roi-heads-mask-head-mask-head-module"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_feature_extractors module": [[55, "detection-maskrcnn-benchmark-modeling-roi-heads-mask-head-roi-mask-feature-extractors-module"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors module": [[56, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head package": [[57, "detection-maskrcnn-benchmark-modeling-roi-heads-maskiou-head-package"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference module": [[58, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss module": [[59, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head module": [[60, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors module": [[61, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors module": [[62, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors"]], "Detection.maskrcnn_benchmark.modeling.roi_heads.roi_heads module": [[63, "detection-maskrcnn-benchmark-modeling-roi-heads-roi-heads-module"]], "Detection.maskrcnn_benchmark.modeling.rpn package": [[64, "detection-maskrcnn-benchmark-modeling-rpn-package"]], "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator module": [[65, "module-Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator"]], "Detection.maskrcnn_benchmark.modeling.rpn.inference module": [[66, "module-Detection.maskrcnn_benchmark.modeling.rpn.inference"]], "Detection.maskrcnn_benchmark.modeling.rpn.loss module": [[67, "module-Detection.maskrcnn_benchmark.modeling.rpn.loss"]], "Detection.maskrcnn_benchmark.modeling.rpn.rpn module": [[68, "detection-maskrcnn-benchmark-modeling-rpn-rpn-module"]], "Detection.maskrcnn_benchmark.modeling.utils module": [[69, "module-Detection.maskrcnn_benchmark.modeling.utils"]], "Detection.maskrcnn_benchmark.solver package": [[70, "detection-maskrcnn-benchmark-solver-package"]], "Detection.maskrcnn_benchmark.solver.build module": [[71, "module-Detection.maskrcnn_benchmark.solver.build"]], "Detection.maskrcnn_benchmark.solver.lr_scheduler module": [[72, "module-Detection.maskrcnn_benchmark.solver.lr_scheduler"]], "Detection.maskrcnn_benchmark.structures package": [[73, "detection-maskrcnn-benchmark-structures-package"]], "Detection.maskrcnn_benchmark.structures.bounding_box module": [[74, "module-Detection.maskrcnn_benchmark.structures.bounding_box"]], "Detection.maskrcnn_benchmark.structures.boxlist_ops module": [[75, "module-Detection.maskrcnn_benchmark.structures.boxlist_ops"]], "Detection.maskrcnn_benchmark.structures.image_list module": [[76, "module-Detection.maskrcnn_benchmark.structures.image_list"]], "Detection.maskrcnn_benchmark.structures.segmentation_mask module": [[77, "module-Detection.maskrcnn_benchmark.structures.segmentation_mask"]], "Detection.maskrcnn_benchmark.utils package": [[78, "detection-maskrcnn-benchmark-utils-package"]], "Detection.maskrcnn_benchmark.utils.c2_model_loading module": [[79, "module-Detection.maskrcnn_benchmark.utils.c2_model_loading"]], "Detection.maskrcnn_benchmark.utils.checkpoint module": [[80, "module-Detection.maskrcnn_benchmark.utils.checkpoint"]], "Detection.maskrcnn_benchmark.utils.collect_env module": [[81, "module-Detection.maskrcnn_benchmark.utils.collect_env"]], "Detection.maskrcnn_benchmark.utils.comm module": [[82, "module-Detection.maskrcnn_benchmark.utils.comm"]], "Detection.maskrcnn_benchmark.utils.cv2_util module": [[83, "module-Detection.maskrcnn_benchmark.utils.cv2_util"]], "Detection.maskrcnn_benchmark.utils.env module": [[84, "module-Detection.maskrcnn_benchmark.utils.env"]], "Detection.maskrcnn_benchmark.utils.imports module": [[85, "module-Detection.maskrcnn_benchmark.utils.imports"]], "Detection.maskrcnn_benchmark.utils.logger module": [[86, "module-Detection.maskrcnn_benchmark.utils.logger"]], "Detection.maskrcnn_benchmark.utils.metric_logger module": [[87, "module-Detection.maskrcnn_benchmark.utils.metric_logger"]], "Detection.maskrcnn_benchmark.utils.miscellaneous module": [[88, "module-Detection.maskrcnn_benchmark.utils.miscellaneous"]], "Detection.maskrcnn_benchmark.utils.model_serialization module": [[89, "module-Detection.maskrcnn_benchmark.utils.model_serialization"]], "Detection.maskrcnn_benchmark.utils.model_zoo module": [[90, "module-Detection.maskrcnn_benchmark.utils.model_zoo"]], "Detection.maskrcnn_benchmark.utils.registry module": [[91, "module-Detection.maskrcnn_benchmark.utils.registry"]], "Detection.predictor module": [[92, "module-Detection.predictor"]], "Detection.setup module": [[93, "detection-setup-module"]], "GCNClustering package": [[94, "gcnclustering-package"]], "GCNClustering.GCNPrediction module": [[95, "module-GCNClustering.GCNPrediction"]], "GCNClustering.models module": [[96, "module-GCNClustering.models"]], "SceneClassifier package": [[97, "sceneclassifier-package"]], "SceneClassifier.predict module": [[98, "module-SceneClassifier.predict"]], "SceneClassifier.predictor module": [[99, "module-SceneClassifier.predictor"]], "SceneClassifier.resnet_lstm module": [[100, "module-SceneClassifier.resnet_lstm"]], "Segmentation package": [[101, "segmentation-package"]], "Segmentation.DeepLab module": [[102, "module-Segmentation.DeepLab"]], "Segmentation.Model module": [[103, "module-Segmentation.Model"]], "Segmentation.generate_rail_mask module": [[104, "module-Segmentation.generate_rail_mask"]], "Segmentation.generate_rail_pole module": [[105, "module-Segmentation.generate_rail_pole"]], "Segmentation.generate_semantic_mask module": [[106, "module-Segmentation.generate_semantic_mask"]], "Tracking package": [[107, "tracking-package"]], "Tracking.final_tracking module": [[108, "module-Tracking.final_tracking"]], "Tracking.find_trajectories module": [[109, "module-Tracking.find_trajectories"]], "Tracking.initial_tracking module": [[110, "module-Tracking.initial_tracking"]], "Paramters": [[110, "paramters"]], "config module": [[111, "module-config"]], "main module": [[113, "module-main"]], "horseracing-v2.4": [[114, "horseracing-v2-4"]], "util package": [[115, "util-package"]], "util.FrameSaver module": [[116, "module-util.FrameSaver"]], "util.database module": [[117, "module-util.database"]], "util.image_util module": [[118, "module-util.image_util"]], "util.mask_util module": [[119, "module-util.mask_util"]], "util.result module": [[120, "module-util.result"]], "Paramters:": [[120, "paramters"]], "util.video_util module": [[121, "module-util.video_util"]]}, "indexentries": {"detection": [[0, "module-Detection"]], "module": [[0, "module-Detection"], [1, "module-Detection.detect_cap_jockey_saddlecloth"], [2, "module-Detection.maskrcnn_benchmark"], [3, "module-Detection.maskrcnn_benchmark.config"], [4, "module-Detection.maskrcnn_benchmark.config.defaults"], [5, "module-Detection.maskrcnn_benchmark.config.paths_catalog"], [9, "module-Detection.maskrcnn_benchmark.data.datasets"], [10, "module-Detection.maskrcnn_benchmark.data.datasets.coco"], [11, "module-Detection.maskrcnn_benchmark.data.datasets.concat_dataset"], [12, "module-Detection.maskrcnn_benchmark.data.datasets.list_dataset"], [20, "module-Detection.maskrcnn_benchmark.engine"], [21, "module-Detection.maskrcnn_benchmark.engine.inference"], [23, "module-Detection.maskrcnn_benchmark.layers"], [24, "module-Detection.maskrcnn_benchmark.layers.batch_norm"], [25, "module-Detection.maskrcnn_benchmark.layers.l2_loss"], [26, "module-Detection.maskrcnn_benchmark.layers.misc"], [27, "module-Detection.maskrcnn_benchmark.layers.nms"], [28, "module-Detection.maskrcnn_benchmark.layers.roi_align"], [29, "module-Detection.maskrcnn_benchmark.layers.roi_pool"], [30, "module-Detection.maskrcnn_benchmark.layers.smooth_l1_loss"], [31, "module-Detection.maskrcnn_benchmark.modeling"], [34, "module-Detection.maskrcnn_benchmark.modeling.backbone.fpn"], [35, "module-Detection.maskrcnn_benchmark.modeling.backbone.resnet"], [36, "module-Detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler"], [37, "module-Detection.maskrcnn_benchmark.modeling.box_coder"], [41, "module-Detection.maskrcnn_benchmark.modeling.matcher"], [42, "module-Detection.maskrcnn_benchmark.modeling.poolers"], [43, "module-Detection.maskrcnn_benchmark.modeling.registry"], [44, "module-Detection.maskrcnn_benchmark.modeling.roi_heads"], [45, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head"], [47, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference"], [48, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss"], [50, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors"], [51, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head"], [52, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference"], [53, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss"], [56, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors"], [57, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head"], [58, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference"], [59, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss"], [60, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head"], [61, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors"], [62, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors"], [64, "module-Detection.maskrcnn_benchmark.modeling.rpn"], [65, "module-Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator"], [66, "module-Detection.maskrcnn_benchmark.modeling.rpn.inference"], [67, "module-Detection.maskrcnn_benchmark.modeling.rpn.loss"], [69, "module-Detection.maskrcnn_benchmark.modeling.utils"], [70, "module-Detection.maskrcnn_benchmark.solver"], [71, "module-Detection.maskrcnn_benchmark.solver.build"], [72, "module-Detection.maskrcnn_benchmark.solver.lr_scheduler"], [73, "module-Detection.maskrcnn_benchmark.structures"], [74, "module-Detection.maskrcnn_benchmark.structures.bounding_box"], [75, "module-Detection.maskrcnn_benchmark.structures.boxlist_ops"], [76, "module-Detection.maskrcnn_benchmark.structures.image_list"], [77, "module-Detection.maskrcnn_benchmark.structures.segmentation_mask"], [78, "module-Detection.maskrcnn_benchmark.utils"], [79, "module-Detection.maskrcnn_benchmark.utils.c2_model_loading"], [80, "module-Detection.maskrcnn_benchmark.utils.checkpoint"], [81, "module-Detection.maskrcnn_benchmark.utils.collect_env"], [82, "module-Detection.maskrcnn_benchmark.utils.comm"], [83, "module-Detection.maskrcnn_benchmark.utils.cv2_util"], [84, "module-Detection.maskrcnn_benchmark.utils.env"], [85, "module-Detection.maskrcnn_benchmark.utils.imports"], [86, "module-Detection.maskrcnn_benchmark.utils.logger"], [87, "module-Detection.maskrcnn_benchmark.utils.metric_logger"], [88, "module-Detection.maskrcnn_benchmark.utils.miscellaneous"], [89, "module-Detection.maskrcnn_benchmark.utils.model_serialization"], [90, "module-Detection.maskrcnn_benchmark.utils.model_zoo"], [91, "module-Detection.maskrcnn_benchmark.utils.registry"], [92, "module-Detection.predictor"], [94, "module-GCNClustering"], [95, "module-GCNClustering.GCNPrediction"], [96, "module-GCNClustering.models"], [97, "module-SceneClassifier"], [98, "module-SceneClassifier.predict"], [99, "module-SceneClassifier.predictor"], [100, "module-SceneClassifier.resnet_lstm"], [101, "module-Segmentation"], [102, "module-Segmentation.DeepLab"], [103, "module-Segmentation.Model"], [104, "module-Segmentation.generate_rail_mask"], [105, "module-Segmentation.generate_rail_pole"], [106, "module-Segmentation.generate_semantic_mask"], [107, "module-Tracking"], [108, "module-Tracking.final_tracking"], [109, "module-Tracking.find_trajectories"], [110, "module-Tracking.initial_tracking"], [111, "module-config"], [113, "module-main"], [115, "module-util"], [116, "module-util.FrameSaver"], [117, "module-util.database"], [118, "module-util.image_util"], [119, "module-util.mask_util"], [120, "module-util.result"], [121, "module-util.video_util"]], "detection.detect_cap_jockey_saddlecloth": [[1, "module-Detection.detect_cap_jockey_saddlecloth"]], "detect_cap_jockey_saddlecloth() (in module detection.detect_cap_jockey_saddlecloth)": [[1, "Detection.detect_cap_jockey_saddlecloth.detect_cap_jockey_saddlecloth"]], "detection.maskrcnn_benchmark": [[2, "module-Detection.maskrcnn_benchmark"]], "detection.maskrcnn_benchmark.config": [[3, "module-Detection.maskrcnn_benchmark.config"]], "detection.maskrcnn_benchmark.config.defaults": [[4, "module-Detection.maskrcnn_benchmark.config.defaults"]], "c2_detectron_models (detection.maskrcnn_benchmark.config.paths_catalog.modelcatalog attribute)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.ModelCatalog.C2_DETECTRON_MODELS"]], "c2_detectron_suffix (detection.maskrcnn_benchmark.config.paths_catalog.modelcatalog attribute)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.ModelCatalog.C2_DETECTRON_SUFFIX"]], "c2_imagenet_models (detection.maskrcnn_benchmark.config.paths_catalog.modelcatalog attribute)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.ModelCatalog.C2_IMAGENET_MODELS"]], "datasets (detection.maskrcnn_benchmark.config.paths_catalog.datasetcatalog attribute)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.DatasetCatalog.DATASETS"]], "data_dir (detection.maskrcnn_benchmark.config.paths_catalog.datasetcatalog attribute)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.DatasetCatalog.DATA_DIR"]], "datasetcatalog (class in detection.maskrcnn_benchmark.config.paths_catalog)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.DatasetCatalog"]], "detection.maskrcnn_benchmark.config.paths_catalog": [[5, "module-Detection.maskrcnn_benchmark.config.paths_catalog"]], "modelcatalog (class in detection.maskrcnn_benchmark.config.paths_catalog)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.ModelCatalog"]], "s3_c2_detectron_url (detection.maskrcnn_benchmark.config.paths_catalog.modelcatalog attribute)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.ModelCatalog.S3_C2_DETECTRON_URL"]], "get() (detection.maskrcnn_benchmark.config.paths_catalog.datasetcatalog static method)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.DatasetCatalog.get"]], "get() (detection.maskrcnn_benchmark.config.paths_catalog.modelcatalog static method)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.ModelCatalog.get"]], "get_c2_detectron_12_2017_baselines() (detection.maskrcnn_benchmark.config.paths_catalog.modelcatalog static method)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines"]], "get_c2_imagenet_pretrained() (detection.maskrcnn_benchmark.config.paths_catalog.modelcatalog static method)": [[5, "Detection.maskrcnn_benchmark.config.paths_catalog.ModelCatalog.get_c2_imagenet_pretrained"]], "cocodataset (class in detection.maskrcnn_benchmark.data.datasets)": [[9, "Detection.maskrcnn_benchmark.data.datasets.COCODataset"]], "concatdataset (class in detection.maskrcnn_benchmark.data.datasets)": [[9, "Detection.maskrcnn_benchmark.data.datasets.ConcatDataset"]], "detection.maskrcnn_benchmark.data.datasets": [[9, "module-Detection.maskrcnn_benchmark.data.datasets"]], "cumulative_sizes (detection.maskrcnn_benchmark.data.datasets.concatdataset attribute)": [[9, "Detection.maskrcnn_benchmark.data.datasets.ConcatDataset.cumulative_sizes"]], "datasets (detection.maskrcnn_benchmark.data.datasets.concatdataset attribute)": [[9, "Detection.maskrcnn_benchmark.data.datasets.ConcatDataset.datasets"]], "get_idxs() (detection.maskrcnn_benchmark.data.datasets.concatdataset method)": [[9, "Detection.maskrcnn_benchmark.data.datasets.ConcatDataset.get_idxs"]], "get_img_info() (detection.maskrcnn_benchmark.data.datasets.cocodataset method)": [[9, "Detection.maskrcnn_benchmark.data.datasets.COCODataset.get_img_info"]], "get_img_info() (detection.maskrcnn_benchmark.data.datasets.concatdataset method)": [[9, "Detection.maskrcnn_benchmark.data.datasets.ConcatDataset.get_img_info"]], "cocodataset (class in detection.maskrcnn_benchmark.data.datasets.coco)": [[10, "Detection.maskrcnn_benchmark.data.datasets.coco.COCODataset"]], "detection.maskrcnn_benchmark.data.datasets.coco": [[10, "module-Detection.maskrcnn_benchmark.data.datasets.coco"]], "get_img_info() (detection.maskrcnn_benchmark.data.datasets.coco.cocodataset method)": [[10, "Detection.maskrcnn_benchmark.data.datasets.coco.COCODataset.get_img_info"]], "concatdataset (class in detection.maskrcnn_benchmark.data.datasets.concat_dataset)": [[11, "Detection.maskrcnn_benchmark.data.datasets.concat_dataset.ConcatDataset"]], "detection.maskrcnn_benchmark.data.datasets.concat_dataset": [[11, "module-Detection.maskrcnn_benchmark.data.datasets.concat_dataset"]], "cumulative_sizes (detection.maskrcnn_benchmark.data.datasets.concat_dataset.concatdataset attribute)": [[11, "Detection.maskrcnn_benchmark.data.datasets.concat_dataset.ConcatDataset.cumulative_sizes"]], "datasets (detection.maskrcnn_benchmark.data.datasets.concat_dataset.concatdataset attribute)": [[11, "Detection.maskrcnn_benchmark.data.datasets.concat_dataset.ConcatDataset.datasets"]], "get_idxs() (detection.maskrcnn_benchmark.data.datasets.concat_dataset.concatdataset method)": [[11, "Detection.maskrcnn_benchmark.data.datasets.concat_dataset.ConcatDataset.get_idxs"]], "get_img_info() (detection.maskrcnn_benchmark.data.datasets.concat_dataset.concatdataset method)": [[11, "Detection.maskrcnn_benchmark.data.datasets.concat_dataset.ConcatDataset.get_img_info"]], "detection.maskrcnn_benchmark.data.datasets.list_dataset": [[12, "module-Detection.maskrcnn_benchmark.data.datasets.list_dataset"]], "listdataset (class in detection.maskrcnn_benchmark.data.datasets.list_dataset)": [[12, "Detection.maskrcnn_benchmark.data.datasets.list_dataset.ListDataset"]], "get_img_info() (detection.maskrcnn_benchmark.data.datasets.list_dataset.listdataset method)": [[12, "Detection.maskrcnn_benchmark.data.datasets.list_dataset.ListDataset.get_img_info"]], "detection.maskrcnn_benchmark.engine": [[20, "module-Detection.maskrcnn_benchmark.engine"]], "cocoresults (class in detection.maskrcnn_benchmark.engine.inference)": [[21, "Detection.maskrcnn_benchmark.engine.inference.COCOResults"]], "detection.maskrcnn_benchmark.engine.inference": [[21, "module-Detection.maskrcnn_benchmark.engine.inference"]], "metrics (detection.maskrcnn_benchmark.engine.inference.cocoresults attribute)": [[21, "Detection.maskrcnn_benchmark.engine.inference.COCOResults.METRICS"]], "check_expected_results() (in module detection.maskrcnn_benchmark.engine.inference)": [[21, "Detection.maskrcnn_benchmark.engine.inference.check_expected_results"]], "compute_on_dataset() (in module detection.maskrcnn_benchmark.engine.inference)": [[21, "Detection.maskrcnn_benchmark.engine.inference.compute_on_dataset"]], "evaluate_box_proposals() (in module detection.maskrcnn_benchmark.engine.inference)": [[21, "Detection.maskrcnn_benchmark.engine.inference.evaluate_box_proposals"]], "evaluate_predictions_on_coco() (in module detection.maskrcnn_benchmark.engine.inference)": [[21, "Detection.maskrcnn_benchmark.engine.inference.evaluate_predictions_on_coco"]], "inference() (in module detection.maskrcnn_benchmark.engine.inference)": [[21, "Detection.maskrcnn_benchmark.engine.inference.inference"]], "prepare_for_coco_detection() (in module detection.maskrcnn_benchmark.engine.inference)": [[21, "Detection.maskrcnn_benchmark.engine.inference.prepare_for_coco_detection"]], "prepare_for_coco_segmentation() (in module detection.maskrcnn_benchmark.engine.inference)": [[21, "Detection.maskrcnn_benchmark.engine.inference.prepare_for_coco_segmentation"]], "update() (detection.maskrcnn_benchmark.engine.inference.cocoresults method)": [[21, "Detection.maskrcnn_benchmark.engine.inference.COCOResults.update"]], "conv2d (class in detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d"]], "convtranspose2d (class in detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d"]], "detection.maskrcnn_benchmark.layers": [[23, "module-Detection.maskrcnn_benchmark.layers"]], "frozenbatchnorm2d (class in detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.FrozenBatchNorm2d"]], "roialign (class in detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.ROIAlign"]], "roipool (class in detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.ROIPool"]], "bias (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.bias"]], "bias (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.bias"]], "dilation (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.dilation"]], "dilation (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.dilation"]], "forward() (detection.maskrcnn_benchmark.layers.conv2d method)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.forward"]], "forward() (detection.maskrcnn_benchmark.layers.convtranspose2d method)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.forward"]], "forward() (detection.maskrcnn_benchmark.layers.frozenbatchnorm2d method)": [[23, "Detection.maskrcnn_benchmark.layers.FrozenBatchNorm2d.forward"]], "forward() (detection.maskrcnn_benchmark.layers.roialign method)": [[23, "Detection.maskrcnn_benchmark.layers.ROIAlign.forward"]], "forward() (detection.maskrcnn_benchmark.layers.roipool method)": [[23, "Detection.maskrcnn_benchmark.layers.ROIPool.forward"]], "groups (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.groups"]], "groups (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.groups"]], "interpolate() (in module detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.interpolate"]], "kernel_size (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.kernel_size"]], "kernel_size (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.kernel_size"]], "l2_loss() (in module detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.l2_loss"]], "nms() (in module detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.nms"]], "out_channels (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.out_channels"]], "out_channels (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.out_channels"]], "output_padding (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.output_padding"]], "output_padding (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.output_padding"]], "padding (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.padding"]], "padding (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.padding"]], "padding_mode (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.padding_mode"]], "padding_mode (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.padding_mode"]], "roi_align() (in module detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.roi_align"]], "roi_pool() (in module detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.roi_pool"]], "smooth_l1_loss() (in module detection.maskrcnn_benchmark.layers)": [[23, "Detection.maskrcnn_benchmark.layers.smooth_l1_loss"]], "stride (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.stride"]], "stride (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.stride"]], "training (detection.maskrcnn_benchmark.layers.frozenbatchnorm2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.FrozenBatchNorm2d.training"]], "training (detection.maskrcnn_benchmark.layers.roialign attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ROIAlign.training"]], "training (detection.maskrcnn_benchmark.layers.roipool attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ROIPool.training"]], "transposed (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.transposed"]], "transposed (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.transposed"]], "weight (detection.maskrcnn_benchmark.layers.conv2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.Conv2d.weight"]], "weight (detection.maskrcnn_benchmark.layers.convtranspose2d attribute)": [[23, "Detection.maskrcnn_benchmark.layers.ConvTranspose2d.weight"]], "detection.maskrcnn_benchmark.layers.batch_norm": [[24, "module-Detection.maskrcnn_benchmark.layers.batch_norm"]], "frozenbatchnorm2d (class in detection.maskrcnn_benchmark.layers.batch_norm)": [[24, "Detection.maskrcnn_benchmark.layers.batch_norm.FrozenBatchNorm2d"]], "forward() (detection.maskrcnn_benchmark.layers.batch_norm.frozenbatchnorm2d method)": [[24, "Detection.maskrcnn_benchmark.layers.batch_norm.FrozenBatchNorm2d.forward"]], "training (detection.maskrcnn_benchmark.layers.batch_norm.frozenbatchnorm2d attribute)": [[24, "Detection.maskrcnn_benchmark.layers.batch_norm.FrozenBatchNorm2d.training"]], "detection.maskrcnn_benchmark.layers.l2_loss": [[25, "module-Detection.maskrcnn_benchmark.layers.l2_loss"]], "l2_loss() (in module detection.maskrcnn_benchmark.layers.l2_loss)": [[25, "Detection.maskrcnn_benchmark.layers.l2_loss.l2_loss"]], "conv2d (class in detection.maskrcnn_benchmark.layers.misc)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d"]], "convtranspose2d (class in detection.maskrcnn_benchmark.layers.misc)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d"]], "detection.maskrcnn_benchmark.layers.misc": [[26, "module-Detection.maskrcnn_benchmark.layers.misc"]], "bias (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.bias"]], "bias (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.bias"]], "dilation (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.dilation"]], "dilation (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.dilation"]], "forward() (detection.maskrcnn_benchmark.layers.misc.conv2d method)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.forward"]], "forward() (detection.maskrcnn_benchmark.layers.misc.convtranspose2d method)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.forward"]], "groups (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.groups"]], "groups (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.groups"]], "interpolate() (in module detection.maskrcnn_benchmark.layers.misc)": [[26, "Detection.maskrcnn_benchmark.layers.misc.interpolate"]], "kernel_size (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.kernel_size"]], "kernel_size (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.kernel_size"]], "out_channels (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.out_channels"]], "out_channels (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.out_channels"]], "output_padding (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.output_padding"]], "output_padding (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.output_padding"]], "padding (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.padding"]], "padding (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.padding"]], "padding_mode (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.padding_mode"]], "padding_mode (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.padding_mode"]], "stride (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.stride"]], "stride (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.stride"]], "training (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.training"]], "training (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.training"]], "transposed (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.transposed"]], "transposed (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.transposed"]], "weight (detection.maskrcnn_benchmark.layers.misc.conv2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.Conv2d.weight"]], "weight (detection.maskrcnn_benchmark.layers.misc.convtranspose2d attribute)": [[26, "Detection.maskrcnn_benchmark.layers.misc.ConvTranspose2d.weight"]], "detection.maskrcnn_benchmark.layers.nms": [[27, "module-Detection.maskrcnn_benchmark.layers.nms"]], "detection.maskrcnn_benchmark.layers.roi_align": [[28, "module-Detection.maskrcnn_benchmark.layers.roi_align"]], "roialign (class in detection.maskrcnn_benchmark.layers.roi_align)": [[28, "Detection.maskrcnn_benchmark.layers.roi_align.ROIAlign"]], "forward() (detection.maskrcnn_benchmark.layers.roi_align.roialign method)": [[28, "Detection.maskrcnn_benchmark.layers.roi_align.ROIAlign.forward"]], "roi_align() (in module detection.maskrcnn_benchmark.layers.roi_align)": [[28, "Detection.maskrcnn_benchmark.layers.roi_align.roi_align"]], "training (detection.maskrcnn_benchmark.layers.roi_align.roialign attribute)": [[28, "Detection.maskrcnn_benchmark.layers.roi_align.ROIAlign.training"]], "detection.maskrcnn_benchmark.layers.roi_pool": [[29, "module-Detection.maskrcnn_benchmark.layers.roi_pool"]], "roipool (class in detection.maskrcnn_benchmark.layers.roi_pool)": [[29, "Detection.maskrcnn_benchmark.layers.roi_pool.ROIPool"]], "forward() (detection.maskrcnn_benchmark.layers.roi_pool.roipool method)": [[29, "Detection.maskrcnn_benchmark.layers.roi_pool.ROIPool.forward"]], "roi_pool() (in module detection.maskrcnn_benchmark.layers.roi_pool)": [[29, "Detection.maskrcnn_benchmark.layers.roi_pool.roi_pool"]], "training (detection.maskrcnn_benchmark.layers.roi_pool.roipool attribute)": [[29, "Detection.maskrcnn_benchmark.layers.roi_pool.ROIPool.training"]], "detection.maskrcnn_benchmark.layers.smooth_l1_loss": [[30, "module-Detection.maskrcnn_benchmark.layers.smooth_l1_loss"]], "smooth_l1_loss() (in module detection.maskrcnn_benchmark.layers.smooth_l1_loss)": [[30, "Detection.maskrcnn_benchmark.layers.smooth_l1_loss.smooth_l1_loss"]], "detection.maskrcnn_benchmark.modeling": [[31, "module-Detection.maskrcnn_benchmark.modeling"]], "detection.maskrcnn_benchmark.modeling.backbone.fpn": [[34, "module-Detection.maskrcnn_benchmark.modeling.backbone.fpn"]], "fpn (class in detection.maskrcnn_benchmark.modeling.backbone.fpn)": [[34, "Detection.maskrcnn_benchmark.modeling.backbone.fpn.FPN"]], "lastlevelmaxpool (class in detection.maskrcnn_benchmark.modeling.backbone.fpn)": [[34, "Detection.maskrcnn_benchmark.modeling.backbone.fpn.LastLevelMaxPool"]], "forward() (detection.maskrcnn_benchmark.modeling.backbone.fpn.fpn method)": [[34, "Detection.maskrcnn_benchmark.modeling.backbone.fpn.FPN.forward"]], "forward() (detection.maskrcnn_benchmark.modeling.backbone.fpn.lastlevelmaxpool method)": [[34, "Detection.maskrcnn_benchmark.modeling.backbone.fpn.LastLevelMaxPool.forward"]], "training (detection.maskrcnn_benchmark.modeling.backbone.fpn.fpn attribute)": [[34, "Detection.maskrcnn_benchmark.modeling.backbone.fpn.FPN.training"]], "training (detection.maskrcnn_benchmark.modeling.backbone.fpn.lastlevelmaxpool attribute)": [[34, "Detection.maskrcnn_benchmark.modeling.backbone.fpn.LastLevelMaxPool.training"]], "bottleneckwithfixedbatchnorm (class in detection.maskrcnn_benchmark.modeling.backbone.resnet)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.BottleneckWithFixedBatchNorm"]], "detection.maskrcnn_benchmark.modeling.backbone.resnet": [[35, "module-Detection.maskrcnn_benchmark.modeling.backbone.resnet"]], "resnet (class in detection.maskrcnn_benchmark.modeling.backbone.resnet)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.ResNet"]], "resnethead (class in detection.maskrcnn_benchmark.modeling.backbone.resnet)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.ResNetHead"]], "stagespec (class in detection.maskrcnn_benchmark.modeling.backbone.resnet)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.StageSpec"]], "stemwithfixedbatchnorm (class in detection.maskrcnn_benchmark.modeling.backbone.resnet)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.StemWithFixedBatchNorm"]], "block_count (detection.maskrcnn_benchmark.modeling.backbone.resnet.stagespec attribute)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.StageSpec.block_count"]], "forward() (detection.maskrcnn_benchmark.modeling.backbone.resnet.bottleneckwithfixedbatchnorm method)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.BottleneckWithFixedBatchNorm.forward"]], "forward() (detection.maskrcnn_benchmark.modeling.backbone.resnet.resnet method)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.ResNet.forward"]], "forward() (detection.maskrcnn_benchmark.modeling.backbone.resnet.resnethead method)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.ResNetHead.forward"]], "forward() (detection.maskrcnn_benchmark.modeling.backbone.resnet.stemwithfixedbatchnorm method)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.StemWithFixedBatchNorm.forward"]], "index (detection.maskrcnn_benchmark.modeling.backbone.resnet.stagespec attribute)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.StageSpec.index"]], "return_features (detection.maskrcnn_benchmark.modeling.backbone.resnet.stagespec attribute)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.StageSpec.return_features"]], "training (detection.maskrcnn_benchmark.modeling.backbone.resnet.bottleneckwithfixedbatchnorm attribute)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.BottleneckWithFixedBatchNorm.training"]], "training (detection.maskrcnn_benchmark.modeling.backbone.resnet.resnet attribute)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.ResNet.training"]], "training (detection.maskrcnn_benchmark.modeling.backbone.resnet.resnethead attribute)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.ResNetHead.training"]], "training (detection.maskrcnn_benchmark.modeling.backbone.resnet.stemwithfixedbatchnorm attribute)": [[35, "Detection.maskrcnn_benchmark.modeling.backbone.resnet.StemWithFixedBatchNorm.training"]], "balancedpositivenegativesampler (class in detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler)": [[36, "Detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler"]], "detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler": [[36, "module-Detection.maskrcnn_benchmark.modeling.balanced_positive_negative_sampler"]], "boxcoder (class in detection.maskrcnn_benchmark.modeling.box_coder)": [[37, "Detection.maskrcnn_benchmark.modeling.box_coder.BoxCoder"]], "detection.maskrcnn_benchmark.modeling.box_coder": [[37, "module-Detection.maskrcnn_benchmark.modeling.box_coder"]], "decode() (detection.maskrcnn_benchmark.modeling.box_coder.boxcoder method)": [[37, "Detection.maskrcnn_benchmark.modeling.box_coder.BoxCoder.decode"]], "encode() (detection.maskrcnn_benchmark.modeling.box_coder.boxcoder method)": [[37, "Detection.maskrcnn_benchmark.modeling.box_coder.BoxCoder.encode"]], "below_low_threshold (detection.maskrcnn_benchmark.modeling.matcher.matcher attribute)": [[41, "Detection.maskrcnn_benchmark.modeling.matcher.Matcher.BELOW_LOW_THRESHOLD"]], "between_thresholds (detection.maskrcnn_benchmark.modeling.matcher.matcher attribute)": [[41, "Detection.maskrcnn_benchmark.modeling.matcher.Matcher.BETWEEN_THRESHOLDS"]], "detection.maskrcnn_benchmark.modeling.matcher": [[41, "module-Detection.maskrcnn_benchmark.modeling.matcher"]], "matcher (class in detection.maskrcnn_benchmark.modeling.matcher)": [[41, "Detection.maskrcnn_benchmark.modeling.matcher.Matcher"]], "set_low_quality_matches_() (detection.maskrcnn_benchmark.modeling.matcher.matcher method)": [[41, "Detection.maskrcnn_benchmark.modeling.matcher.Matcher.set_low_quality_matches_"]], "detection.maskrcnn_benchmark.modeling.poolers": [[42, "module-Detection.maskrcnn_benchmark.modeling.poolers"]], "levelmapper (class in detection.maskrcnn_benchmark.modeling.poolers)": [[42, "Detection.maskrcnn_benchmark.modeling.poolers.LevelMapper"]], "pooler (class in detection.maskrcnn_benchmark.modeling.poolers)": [[42, "Detection.maskrcnn_benchmark.modeling.poolers.Pooler"]], "convert_to_roi_format() (detection.maskrcnn_benchmark.modeling.poolers.pooler method)": [[42, "Detection.maskrcnn_benchmark.modeling.poolers.Pooler.convert_to_roi_format"]], "forward() (detection.maskrcnn_benchmark.modeling.poolers.pooler method)": [[42, "Detection.maskrcnn_benchmark.modeling.poolers.Pooler.forward"]], "training (detection.maskrcnn_benchmark.modeling.poolers.pooler attribute)": [[42, "Detection.maskrcnn_benchmark.modeling.poolers.Pooler.training"]], "detection.maskrcnn_benchmark.modeling.registry": [[43, "module-Detection.maskrcnn_benchmark.modeling.registry"]], "detection.maskrcnn_benchmark.modeling.roi_heads": [[44, "module-Detection.maskrcnn_benchmark.modeling.roi_heads"]], "detection.maskrcnn_benchmark.modeling.roi_heads.box_head": [[45, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head"]], "detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference": [[47, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference"]], "postprocessor (class in detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference)": [[47, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.PostProcessor"]], "filter_results() (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.postprocessor method)": [[47, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.PostProcessor.filter_results"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.postprocessor method)": [[47, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.PostProcessor.forward"]], "make_roi_box_post_processor() (in module detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference)": [[47, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.make_roi_box_post_processor"]], "prepare_boxlist() (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.postprocessor method)": [[47, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.PostProcessor.prepare_boxlist"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.postprocessor attribute)": [[47, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.inference.PostProcessor.training"]], "detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss": [[48, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss"]], "fastrcnnlosscomputation (class in detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss)": [[48, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.FastRCNNLossComputation"]], "make_roi_box_loss_evaluator() (in module detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss)": [[48, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.make_roi_box_loss_evaluator"]], "match_targets_to_proposals() (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.fastrcnnlosscomputation method)": [[48, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.FastRCNNLossComputation.match_targets_to_proposals"]], "prepare_targets() (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.fastrcnnlosscomputation method)": [[48, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.FastRCNNLossComputation.prepare_targets"]], "subsample() (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.fastrcnnlosscomputation method)": [[48, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.loss.FastRCNNLossComputation.subsample"]], "detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors": [[50, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors"]], "fpnpredictor (class in detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors)": [[50, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.FPNPredictor"]], "fastrcnnpredictor (class in detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors)": [[50, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.FastRCNNPredictor"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.fpnpredictor method)": [[50, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.FPNPredictor.forward"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.fastrcnnpredictor method)": [[50, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.FastRCNNPredictor.forward"]], "make_roi_box_predictor() (in module detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors)": [[50, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.make_roi_box_predictor"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.fpnpredictor attribute)": [[50, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.FPNPredictor.training"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.fastrcnnpredictor attribute)": [[50, "Detection.maskrcnn_benchmark.modeling.roi_heads.box_head.roi_box_predictors.FastRCNNPredictor.training"]], "detection.maskrcnn_benchmark.modeling.roi_heads.mask_head": [[51, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head"]], "detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference": [[52, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference"]], "maskpostprocessor (class in detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.MaskPostProcessor"]], "maskpostprocessorcocoformat (class in detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.MaskPostProcessorCOCOFormat"]], "masker (class in detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker"]], "expand_boxes() (in module detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.expand_boxes"]], "expand_masks() (in module detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.expand_masks"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.maskpostprocessor method)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.MaskPostProcessor.forward"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.maskpostprocessorcocoformat method)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.MaskPostProcessorCOCOFormat.forward"]], "forward_single_image() (detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.masker method)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker.forward_single_image"]], "make_roi_mask_post_processor() (in module detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.make_roi_mask_post_processor"]], "paste_mask_in_image() (in module detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.paste_mask_in_image"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.maskpostprocessor attribute)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.MaskPostProcessor.training"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.maskpostprocessorcocoformat attribute)": [[52, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.MaskPostProcessorCOCOFormat.training"]], "detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss": [[53, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss"]], "maskrcnnlosscomputation (class in detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss)": [[53, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss.MaskRCNNLossComputation"]], "make_roi_mask_loss_evaluator() (in module detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss)": [[53, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss.make_roi_mask_loss_evaluator"]], "match_targets_to_proposals() (detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss.maskrcnnlosscomputation method)": [[53, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss.MaskRCNNLossComputation.match_targets_to_proposals"]], "prepare_targets() (detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss.maskrcnnlosscomputation method)": [[53, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss.MaskRCNNLossComputation.prepare_targets"]], "project_masks_on_boxes() (in module detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss)": [[53, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.loss.project_masks_on_boxes"]], "detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors": [[56, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors"]], "maskrcnnc4predictor (class in detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors)": [[56, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors.MaskRCNNC4Predictor"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors.maskrcnnc4predictor method)": [[56, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors.MaskRCNNC4Predictor.forward"]], "make_roi_mask_predictor() (in module detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors)": [[56, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors.make_roi_mask_predictor"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors.maskrcnnc4predictor attribute)": [[56, "Detection.maskrcnn_benchmark.modeling.roi_heads.mask_head.roi_mask_predictors.MaskRCNNC4Predictor.training"]], "detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head": [[57, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head"]], "detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference": [[58, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference"]], "maskioupostprocessor (class in detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference)": [[58, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference.MaskIoUPostProcessor"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference.maskioupostprocessor method)": [[58, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference.MaskIoUPostProcessor.forward"]], "make_roi_maskiou_post_processor() (in module detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference)": [[58, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference.make_roi_maskiou_post_processor"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference.maskioupostprocessor attribute)": [[58, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.inference.MaskIoUPostProcessor.training"]], "detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss": [[59, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss"]], "maskioulosscomputation (class in detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss)": [[59, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss.MaskIoULossComputation"]], "make_roi_maskiou_loss_evaluator() (in module detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss)": [[59, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.loss.make_roi_maskiou_loss_evaluator"]], "detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head": [[60, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head"]], "roimaskiouhead (class in detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head)": [[60, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head.ROIMaskIoUHead"]], "build_roi_maskiou_head() (in module detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head)": [[60, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head.build_roi_maskiou_head"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head.roimaskiouhead method)": [[60, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head.ROIMaskIoUHead.forward"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head.roimaskiouhead attribute)": [[60, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.maskiou_head.ROIMaskIoUHead.training"]], "detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors": [[61, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors"]], "maskioufeatureextractor (class in detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors)": [[61, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors.MaskIoUFeatureExtractor"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors.maskioufeatureextractor method)": [[61, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors.MaskIoUFeatureExtractor.forward"]], "make_roi_maskiou_feature_extractor() (in module detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors)": [[61, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors.make_roi_maskiou_feature_extractor"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors.maskioufeatureextractor attribute)": [[61, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_feature_extractors.MaskIoUFeatureExtractor.training"]], "detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors": [[62, "module-Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors"]], "maskioupredictor (class in detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors)": [[62, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors.MaskIoUPredictor"]], "forward() (detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors.maskioupredictor method)": [[62, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors.MaskIoUPredictor.forward"]], "make_roi_maskiou_predictor() (in module detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors)": [[62, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors.make_roi_maskiou_predictor"]], "training (detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors.maskioupredictor attribute)": [[62, "Detection.maskrcnn_benchmark.modeling.roi_heads.maskiou_head.roi_maskiou_predictors.MaskIoUPredictor.training"]], "detection.maskrcnn_benchmark.modeling.rpn": [[64, "module-Detection.maskrcnn_benchmark.modeling.rpn"]], "anchorgenerator (class in detection.maskrcnn_benchmark.modeling.rpn.anchor_generator)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.AnchorGenerator"]], "bufferlist (class in detection.maskrcnn_benchmark.modeling.rpn.anchor_generator)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.BufferList"]], "detection.maskrcnn_benchmark.modeling.rpn.anchor_generator": [[65, "module-Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator"]], "add_visibility_to() (detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.anchorgenerator method)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.AnchorGenerator.add_visibility_to"]], "extend() (detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.bufferlist method)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.BufferList.extend"]], "forward() (detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.anchorgenerator method)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.AnchorGenerator.forward"]], "generate_anchors() (in module detection.maskrcnn_benchmark.modeling.rpn.anchor_generator)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.generate_anchors"]], "grid_anchors() (detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.anchorgenerator method)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.AnchorGenerator.grid_anchors"]], "make_anchor_generator() (in module detection.maskrcnn_benchmark.modeling.rpn.anchor_generator)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.make_anchor_generator"]], "num_anchors_per_location() (detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.anchorgenerator method)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.AnchorGenerator.num_anchors_per_location"]], "training (detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.anchorgenerator attribute)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.AnchorGenerator.training"]], "training (detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.bufferlist attribute)": [[65, "Detection.maskrcnn_benchmark.modeling.rpn.anchor_generator.BufferList.training"]], "detection.maskrcnn_benchmark.modeling.rpn.inference": [[66, "module-Detection.maskrcnn_benchmark.modeling.rpn.inference"]], "rpnpostprocessor (class in detection.maskrcnn_benchmark.modeling.rpn.inference)": [[66, "Detection.maskrcnn_benchmark.modeling.rpn.inference.RPNPostProcessor"]], "add_gt_proposals() (detection.maskrcnn_benchmark.modeling.rpn.inference.rpnpostprocessor method)": [[66, "Detection.maskrcnn_benchmark.modeling.rpn.inference.RPNPostProcessor.add_gt_proposals"]], "forward() (detection.maskrcnn_benchmark.modeling.rpn.inference.rpnpostprocessor method)": [[66, "Detection.maskrcnn_benchmark.modeling.rpn.inference.RPNPostProcessor.forward"]], "forward_for_single_feature_map() (detection.maskrcnn_benchmark.modeling.rpn.inference.rpnpostprocessor method)": [[66, "Detection.maskrcnn_benchmark.modeling.rpn.inference.RPNPostProcessor.forward_for_single_feature_map"]], "make_rpn_postprocessor() (in module detection.maskrcnn_benchmark.modeling.rpn.inference)": [[66, "Detection.maskrcnn_benchmark.modeling.rpn.inference.make_rpn_postprocessor"]], "select_over_all_levels() (detection.maskrcnn_benchmark.modeling.rpn.inference.rpnpostprocessor method)": [[66, "Detection.maskrcnn_benchmark.modeling.rpn.inference.RPNPostProcessor.select_over_all_levels"]], "training (detection.maskrcnn_benchmark.modeling.rpn.inference.rpnpostprocessor attribute)": [[66, "Detection.maskrcnn_benchmark.modeling.rpn.inference.RPNPostProcessor.training"]], "detection.maskrcnn_benchmark.modeling.rpn.loss": [[67, "module-Detection.maskrcnn_benchmark.modeling.rpn.loss"]], "rpnlosscomputation (class in detection.maskrcnn_benchmark.modeling.rpn.loss)": [[67, "Detection.maskrcnn_benchmark.modeling.rpn.loss.RPNLossComputation"]], "make_rpn_loss_evaluator() (in module detection.maskrcnn_benchmark.modeling.rpn.loss)": [[67, "Detection.maskrcnn_benchmark.modeling.rpn.loss.make_rpn_loss_evaluator"]], "match_targets_to_anchors() (detection.maskrcnn_benchmark.modeling.rpn.loss.rpnlosscomputation method)": [[67, "Detection.maskrcnn_benchmark.modeling.rpn.loss.RPNLossComputation.match_targets_to_anchors"]], "prepare_targets() (detection.maskrcnn_benchmark.modeling.rpn.loss.rpnlosscomputation method)": [[67, "Detection.maskrcnn_benchmark.modeling.rpn.loss.RPNLossComputation.prepare_targets"]], "detection.maskrcnn_benchmark.modeling.utils": [[69, "module-Detection.maskrcnn_benchmark.modeling.utils"]], "cat() (in module detection.maskrcnn_benchmark.modeling.utils)": [[69, "Detection.maskrcnn_benchmark.modeling.utils.cat"]], "detection.maskrcnn_benchmark.solver": [[70, "module-Detection.maskrcnn_benchmark.solver"]], "detection.maskrcnn_benchmark.solver.build": [[71, "module-Detection.maskrcnn_benchmark.solver.build"]], "make_lr_scheduler() (in module detection.maskrcnn_benchmark.solver.build)": [[71, "Detection.maskrcnn_benchmark.solver.build.make_lr_scheduler"]], "make_optimizer() (in module detection.maskrcnn_benchmark.solver.build)": [[71, "Detection.maskrcnn_benchmark.solver.build.make_optimizer"]], "detection.maskrcnn_benchmark.solver.lr_scheduler": [[72, "module-Detection.maskrcnn_benchmark.solver.lr_scheduler"]], "warmupmultisteplr (class in detection.maskrcnn_benchmark.solver.lr_scheduler)": [[72, "Detection.maskrcnn_benchmark.solver.lr_scheduler.WarmupMultiStepLR"]], "get_lr() (detection.maskrcnn_benchmark.solver.lr_scheduler.warmupmultisteplr method)": [[72, "Detection.maskrcnn_benchmark.solver.lr_scheduler.WarmupMultiStepLR.get_lr"]], "detection.maskrcnn_benchmark.structures": [[73, "module-Detection.maskrcnn_benchmark.structures"]], "boxlist (class in detection.maskrcnn_benchmark.structures.bounding_box)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList"]], "detection.maskrcnn_benchmark.structures.bounding_box": [[74, "module-Detection.maskrcnn_benchmark.structures.bounding_box"]], "add_field() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.add_field"]], "area() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.area"]], "clip_to_image() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.clip_to_image"]], "convert() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.convert"]], "copy_with_fields() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.copy_with_fields"]], "crop() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.crop"]], "fields() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.fields"]], "get_field() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.get_field"]], "has_field() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.has_field"]], "resize() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.resize"]], "to() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.to"]], "transpose() (detection.maskrcnn_benchmark.structures.bounding_box.boxlist method)": [[74, "Detection.maskrcnn_benchmark.structures.bounding_box.BoxList.transpose"]], "detection.maskrcnn_benchmark.structures.boxlist_ops": [[75, "module-Detection.maskrcnn_benchmark.structures.boxlist_ops"]], "boxlist_iou() (in module detection.maskrcnn_benchmark.structures.boxlist_ops)": [[75, "Detection.maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou"]], "boxlist_nms() (in module detection.maskrcnn_benchmark.structures.boxlist_ops)": [[75, "Detection.maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms"]], "cat_boxlist() (in module detection.maskrcnn_benchmark.structures.boxlist_ops)": [[75, "Detection.maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist"]], "remove_small_boxes() (in module detection.maskrcnn_benchmark.structures.boxlist_ops)": [[75, "Detection.maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes"]], "detection.maskrcnn_benchmark.structures.image_list": [[76, "module-Detection.maskrcnn_benchmark.structures.image_list"]], "imagelist (class in detection.maskrcnn_benchmark.structures.image_list)": [[76, "Detection.maskrcnn_benchmark.structures.image_list.ImageList"]], "to() (detection.maskrcnn_benchmark.structures.image_list.imagelist method)": [[76, "Detection.maskrcnn_benchmark.structures.image_list.ImageList.to"]], "to_image_list() (in module detection.maskrcnn_benchmark.structures.image_list)": [[76, "Detection.maskrcnn_benchmark.structures.image_list.to_image_list"]], "detection.maskrcnn_benchmark.structures.segmentation_mask": [[77, "module-Detection.maskrcnn_benchmark.structures.segmentation_mask"]], "mask (class in detection.maskrcnn_benchmark.structures.segmentation_mask)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.Mask"]], "polygons (class in detection.maskrcnn_benchmark.structures.segmentation_mask)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.Polygons"]], "segmentationmask (class in detection.maskrcnn_benchmark.structures.segmentation_mask)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask"]], "convert() (detection.maskrcnn_benchmark.structures.segmentation_mask.polygons method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.Polygons.convert"]], "crop() (detection.maskrcnn_benchmark.structures.segmentation_mask.mask method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.Mask.crop"]], "crop() (detection.maskrcnn_benchmark.structures.segmentation_mask.polygons method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.Polygons.crop"]], "crop() (detection.maskrcnn_benchmark.structures.segmentation_mask.segmentationmask method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask.crop"]], "resize() (detection.maskrcnn_benchmark.structures.segmentation_mask.mask method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.Mask.resize"]], "resize() (detection.maskrcnn_benchmark.structures.segmentation_mask.polygons method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.Polygons.resize"]], "resize() (detection.maskrcnn_benchmark.structures.segmentation_mask.segmentationmask method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask.resize"]], "to() (detection.maskrcnn_benchmark.structures.segmentation_mask.segmentationmask method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask.to"]], "transpose() (detection.maskrcnn_benchmark.structures.segmentation_mask.mask method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.Mask.transpose"]], "transpose() (detection.maskrcnn_benchmark.structures.segmentation_mask.polygons method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.Polygons.transpose"]], "transpose() (detection.maskrcnn_benchmark.structures.segmentation_mask.segmentationmask method)": [[77, "Detection.maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask.transpose"]], "detection.maskrcnn_benchmark.utils": [[78, "module-Detection.maskrcnn_benchmark.utils"]], "detection.maskrcnn_benchmark.utils.c2_model_loading": [[79, "module-Detection.maskrcnn_benchmark.utils.c2_model_loading"]], "load_c2_format() (in module detection.maskrcnn_benchmark.utils.c2_model_loading)": [[79, "Detection.maskrcnn_benchmark.utils.c2_model_loading.load_c2_format"]], "load_resnet_c2_format() (in module detection.maskrcnn_benchmark.utils.c2_model_loading)": [[79, "Detection.maskrcnn_benchmark.utils.c2_model_loading.load_resnet_c2_format"]], "checkpointer (class in detection.maskrcnn_benchmark.utils.checkpoint)": [[80, "Detection.maskrcnn_benchmark.utils.checkpoint.Checkpointer"]], "detection.maskrcnn_benchmark.utils.checkpoint": [[80, "module-Detection.maskrcnn_benchmark.utils.checkpoint"]], "detectroncheckpointer (class in detection.maskrcnn_benchmark.utils.checkpoint)": [[80, "Detection.maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer"]], "get_checkpoint_file() (detection.maskrcnn_benchmark.utils.checkpoint.checkpointer method)": [[80, "Detection.maskrcnn_benchmark.utils.checkpoint.Checkpointer.get_checkpoint_file"]], "has_checkpoint() (detection.maskrcnn_benchmark.utils.checkpoint.checkpointer method)": [[80, "Detection.maskrcnn_benchmark.utils.checkpoint.Checkpointer.has_checkpoint"]], "load() (detection.maskrcnn_benchmark.utils.checkpoint.checkpointer method)": [[80, "Detection.maskrcnn_benchmark.utils.checkpoint.Checkpointer.load"]], "save() (detection.maskrcnn_benchmark.utils.checkpoint.checkpointer method)": [[80, "Detection.maskrcnn_benchmark.utils.checkpoint.Checkpointer.save"]], "tag_last_checkpoint() (detection.maskrcnn_benchmark.utils.checkpoint.checkpointer method)": [[80, "Detection.maskrcnn_benchmark.utils.checkpoint.Checkpointer.tag_last_checkpoint"]], "detection.maskrcnn_benchmark.utils.collect_env": [[81, "module-Detection.maskrcnn_benchmark.utils.collect_env"]], "collect_env_info() (in module detection.maskrcnn_benchmark.utils.collect_env)": [[81, "Detection.maskrcnn_benchmark.utils.collect_env.collect_env_info"]], "get_pil_version() (in module detection.maskrcnn_benchmark.utils.collect_env)": [[81, "Detection.maskrcnn_benchmark.utils.collect_env.get_pil_version"]], "detection.maskrcnn_benchmark.utils.comm": [[82, "module-Detection.maskrcnn_benchmark.utils.comm"]], "get_rank() (in module detection.maskrcnn_benchmark.utils.comm)": [[82, "Detection.maskrcnn_benchmark.utils.comm.get_rank"]], "get_world_size() (in module detection.maskrcnn_benchmark.utils.comm)": [[82, "Detection.maskrcnn_benchmark.utils.comm.get_world_size"]], "is_main_process() (in module detection.maskrcnn_benchmark.utils.comm)": [[82, "Detection.maskrcnn_benchmark.utils.comm.is_main_process"]], "scatter_gather() (in module detection.maskrcnn_benchmark.utils.comm)": [[82, "Detection.maskrcnn_benchmark.utils.comm.scatter_gather"]], "synchronize() (in module detection.maskrcnn_benchmark.utils.comm)": [[82, "Detection.maskrcnn_benchmark.utils.comm.synchronize"]], "detection.maskrcnn_benchmark.utils.cv2_util": [[83, "module-Detection.maskrcnn_benchmark.utils.cv2_util"]], "findcontours() (in module detection.maskrcnn_benchmark.utils.cv2_util)": [[83, "Detection.maskrcnn_benchmark.utils.cv2_util.findContours"]], "detection.maskrcnn_benchmark.utils.env": [[84, "module-Detection.maskrcnn_benchmark.utils.env"]], "setup_custom_environment() (in module detection.maskrcnn_benchmark.utils.env)": [[84, "Detection.maskrcnn_benchmark.utils.env.setup_custom_environment"]], "setup_environment() (in module detection.maskrcnn_benchmark.utils.env)": [[84, "Detection.maskrcnn_benchmark.utils.env.setup_environment"]], "detection.maskrcnn_benchmark.utils.imports": [[85, "module-Detection.maskrcnn_benchmark.utils.imports"]], "import_file() (in module detection.maskrcnn_benchmark.utils.imports)": [[85, "Detection.maskrcnn_benchmark.utils.imports.import_file"]], "detection.maskrcnn_benchmark.utils.logger": [[86, "module-Detection.maskrcnn_benchmark.utils.logger"]], "setup_logger() (in module detection.maskrcnn_benchmark.utils.logger)": [[86, "Detection.maskrcnn_benchmark.utils.logger.setup_logger"]], "detection.maskrcnn_benchmark.utils.metric_logger": [[87, "module-Detection.maskrcnn_benchmark.utils.metric_logger"]], "metriclogger (class in detection.maskrcnn_benchmark.utils.metric_logger)": [[87, "Detection.maskrcnn_benchmark.utils.metric_logger.MetricLogger"]], "smoothedvalue (class in detection.maskrcnn_benchmark.utils.metric_logger)": [[87, "Detection.maskrcnn_benchmark.utils.metric_logger.SmoothedValue"]], "avg (detection.maskrcnn_benchmark.utils.metric_logger.smoothedvalue property)": [[87, "Detection.maskrcnn_benchmark.utils.metric_logger.SmoothedValue.avg"]], "global_avg (detection.maskrcnn_benchmark.utils.metric_logger.smoothedvalue property)": [[87, "Detection.maskrcnn_benchmark.utils.metric_logger.SmoothedValue.global_avg"]], "median (detection.maskrcnn_benchmark.utils.metric_logger.smoothedvalue property)": [[87, "Detection.maskrcnn_benchmark.utils.metric_logger.SmoothedValue.median"]], "update() (detection.maskrcnn_benchmark.utils.metric_logger.metriclogger method)": [[87, "Detection.maskrcnn_benchmark.utils.metric_logger.MetricLogger.update"]], "update() (detection.maskrcnn_benchmark.utils.metric_logger.smoothedvalue method)": [[87, "Detection.maskrcnn_benchmark.utils.metric_logger.SmoothedValue.update"]], "detection.maskrcnn_benchmark.utils.miscellaneous": [[88, "module-Detection.maskrcnn_benchmark.utils.miscellaneous"]], "mkdir() (in module detection.maskrcnn_benchmark.utils.miscellaneous)": [[88, "Detection.maskrcnn_benchmark.utils.miscellaneous.mkdir"]], "detection.maskrcnn_benchmark.utils.model_serialization": [[89, "module-Detection.maskrcnn_benchmark.utils.model_serialization"]], "align_and_update_state_dicts() (in module detection.maskrcnn_benchmark.utils.model_serialization)": [[89, "Detection.maskrcnn_benchmark.utils.model_serialization.align_and_update_state_dicts"]], "load_state_dict() (in module detection.maskrcnn_benchmark.utils.model_serialization)": [[89, "Detection.maskrcnn_benchmark.utils.model_serialization.load_state_dict"]], "strip_prefix_if_present() (in module detection.maskrcnn_benchmark.utils.model_serialization)": [[89, "Detection.maskrcnn_benchmark.utils.model_serialization.strip_prefix_if_present"]], "detection.maskrcnn_benchmark.utils.model_zoo": [[90, "module-Detection.maskrcnn_benchmark.utils.model_zoo"]], "cache_url() (in module detection.maskrcnn_benchmark.utils.model_zoo)": [[90, "Detection.maskrcnn_benchmark.utils.model_zoo.cache_url"]], "detection.maskrcnn_benchmark.utils.registry": [[91, "module-Detection.maskrcnn_benchmark.utils.registry"]], "registry (class in detection.maskrcnn_benchmark.utils.registry)": [[91, "Detection.maskrcnn_benchmark.utils.registry.Registry"]], "register() (detection.maskrcnn_benchmark.utils.registry.registry method)": [[91, "Detection.maskrcnn_benchmark.utils.registry.Registry.register"]], "categories (detection.predictor.maskscoringrcnn attribute)": [[92, "Detection.predictor.MaskScoringRCNN.CATEGORIES"]], "detection.predictor": [[92, "module-Detection.predictor"]], "maskscoringrcnn (class in detection.predictor)": [[92, "Detection.predictor.MaskScoringRCNN"]], "resize (class in detection.predictor)": [[92, "Detection.predictor.Resize"]], "build_transform() (detection.predictor.maskscoringrcnn method)": [[92, "Detection.predictor.MaskScoringRCNN.build_transform"]], "compute_prediction() (detection.predictor.maskscoringrcnn method)": [[92, "Detection.predictor.MaskScoringRCNN.compute_prediction"]], "get_result_by_frame() (detection.predictor.maskscoringrcnn method)": [[92, "Detection.predictor.MaskScoringRCNN.get_result_by_frame"]], "get_size() (detection.predictor.resize method)": [[92, "Detection.predictor.Resize.get_size"]], "select_top_predictions() (detection.predictor.maskscoringrcnn method)": [[92, "Detection.predictor.MaskScoringRCNN.select_top_predictions"]], "gcnclustering": [[94, "module-GCNClustering"]], "featuredataset (class in gcnclustering.gcnprediction)": [[95, "GCNClustering.GCNPrediction.FeatureDataset"]], "gcncluster (class in gcnclustering.gcnprediction)": [[95, "GCNClustering.GCNPrediction.GCNCluster"]], "gcnclustering.gcnprediction": [[95, "module-GCNClustering.GCNPrediction"]], "graphdataset (class in gcnclustering.gcnprediction)": [[95, "GCNClustering.GCNPrediction.GraphDataset"]], "collate_fn() (gcnclustering.gcnprediction.featuredataset method)": [[95, "GCNClustering.GCNPrediction.FeatureDataset.collate_fn"]], "collate_fn() (gcnclustering.gcnprediction.graphdataset method)": [[95, "GCNClustering.GCNPrediction.GraphDataset.collate_fn"]], "extract_clusters_from_matrix() (gcnclustering.gcnprediction.gcncluster method)": [[95, "GCNClustering.GCNPrediction.GCNCluster.extract_clusters_from_matrix"]], "get_feats_and_graph() (gcnclustering.gcnprediction.gcncluster method)": [[95, "GCNClustering.GCNPrediction.GCNCluster.get_feats_and_graph"]], "get_ips_of_node_i() (gcnclustering.gcnprediction.graphdataset method)": [[95, "GCNClustering.GCNPrediction.GraphDataset.get_ips_of_node_i"]], "predict() (gcnclustering.gcnprediction.gcncluster method)": [[95, "GCNClustering.GCNPrediction.GCNCluster.predict"]], "preprocess() (gcnclustering.gcnprediction.featuredataset method)": [[95, "GCNClustering.GCNPrediction.FeatureDataset.preprocess"]], "featureaggregator (class in gcnclustering.models)": [[96, "GCNClustering.models.FeatureAggregator"]], "gcn (class in gcnclustering.models)": [[96, "GCNClustering.models.GCN"]], "gcnclustering.models": [[96, "module-GCNClustering.models"]], "graphconv (class in gcnclustering.models)": [[96, "GCNClustering.models.GraphConv"]], "meanaggregator (class in gcnclustering.models)": [[96, "GCNClustering.models.MeanAggregator"]], "create_hidden_layer() (gcnclustering.models.featureaggregator method)": [[96, "GCNClustering.models.FeatureAggregator.create_hidden_layer"]], "forward() (gcnclustering.models.featureaggregator method)": [[96, "GCNClustering.models.FeatureAggregator.forward"]], "forward() (gcnclustering.models.gcn method)": [[96, "GCNClustering.models.GCN.forward"]], "forward() (gcnclustering.models.graphconv method)": [[96, "GCNClustering.models.GraphConv.forward"]], "forward() (gcnclustering.models.meanaggregator method)": [[96, "GCNClustering.models.MeanAggregator.forward"]], "training (gcnclustering.models.featureaggregator attribute)": [[96, "GCNClustering.models.FeatureAggregator.training"]], "training (gcnclustering.models.gcn attribute)": [[96, "GCNClustering.models.GCN.training"]], "training (gcnclustering.models.graphconv attribute)": [[96, "GCNClustering.models.GraphConv.training"]], "training (gcnclustering.models.meanaggregator attribute)": [[96, "GCNClustering.models.MeanAggregator.training"]], "sceneclassifier": [[97, "module-SceneClassifier"]], "sceneclassifier.predict": [[98, "module-SceneClassifier.predict"]], "find_start_end_cc() (in module sceneclassifier.predict)": [[98, "SceneClassifier.predict.find_start_end_cc"]], "sceneclassificationpredictor (class in sceneclassifier.predictor)": [[99, "SceneClassifier.predictor.SceneClassificationPredictor"]], "sceneclassifier.predictor": [[99, "module-SceneClassifier.predictor"]], "clear() (sceneclassifier.predictor.sceneclassificationpredictor method)": [[99, "SceneClassifier.predictor.SceneClassificationPredictor.clear"]], "predict() (sceneclassifier.predictor.sceneclassificationpredictor method)": [[99, "SceneClassifier.predictor.SceneClassificationPredictor.predict"]], "preprocess() (sceneclassifier.predictor.sceneclassificationpredictor method)": [[99, "SceneClassifier.predictor.SceneClassificationPredictor.preprocess"]], "crossentropyloss() (in module sceneclassifier.resnet_lstm)": [[100, "SceneClassifier.resnet_lstm.CrossEntropyLoss"]], "lstmdecoder (class in sceneclassifier.resnet_lstm)": [[100, "SceneClassifier.resnet_lstm.LSTMDecoder"]], "resnetencoder (class in sceneclassifier.resnet_lstm)": [[100, "SceneClassifier.resnet_lstm.ResNetEncoder"]], "sceneclassifier.resnet_lstm": [[100, "module-SceneClassifier.resnet_lstm"]], "forward() (sceneclassifier.resnet_lstm.lstmdecoder method)": [[100, "SceneClassifier.resnet_lstm.LSTMDecoder.forward"]], "forward() (sceneclassifier.resnet_lstm.resnetencoder method)": [[100, "SceneClassifier.resnet_lstm.ResNetEncoder.forward"]], "log_softmax() (in module sceneclassifier.resnet_lstm)": [[100, "SceneClassifier.resnet_lstm.log_softmax"]], "softmax() (in module sceneclassifier.resnet_lstm)": [[100, "SceneClassifier.resnet_lstm.softmax"]], "training (sceneclassifier.resnet_lstm.lstmdecoder attribute)": [[100, "SceneClassifier.resnet_lstm.LSTMDecoder.training"]], "training (sceneclassifier.resnet_lstm.resnetencoder attribute)": [[100, "SceneClassifier.resnet_lstm.ResNetEncoder.training"]], "segmentation": [[101, "module-Segmentation"]], "segmentation.deeplab": [[102, "module-Segmentation.DeepLab"]], "xceptionmodel() (in module segmentation.deeplab)": [[102, "Segmentation.DeepLab.XceptionModel"]], "decoder() (in module segmentation.deeplab)": [[102, "Segmentation.DeepLab.decoder"]], "deeplab() (in module segmentation.deeplab)": [[102, "Segmentation.DeepLab.deeplab"]], "relu_separable_bn_block() (in module segmentation.deeplab)": [[102, "Segmentation.DeepLab.relu_separable_bn_block"]], "model (class in segmentation.model)": [[103, "Segmentation.Model.Model"]], "segmentation.model": [[103, "module-Segmentation.Model"]], "predict() (segmentation.model.model method)": [[103, "Segmentation.Model.Model.predict"]], "restore() (segmentation.model.model method)": [[103, "Segmentation.Model.Model.restore"]], "segmentation (class in segmentation.generate_rail_mask)": [[104, "Segmentation.generate_rail_mask.Segmentation"]], "segmentation.generate_rail_mask": [[104, "module-Segmentation.generate_rail_mask"]], "generate_rail_mask() (in module segmentation.generate_rail_mask)": [[104, "Segmentation.generate_rail_mask.generate_rail_mask"]], "get_mask() (segmentation.generate_rail_mask.segmentation method)": [[104, "Segmentation.generate_rail_mask.Segmentation.get_mask"]], "segmentation.generate_rail_pole": [[105, "module-Segmentation.generate_rail_pole"]], "generate_rail_pole() (in module segmentation.generate_rail_pole)": [[105, "Segmentation.generate_rail_pole.generate_rail_pole"]], "segmentation (class in segmentation.generate_semantic_mask)": [[106, "Segmentation.generate_semantic_mask.Segmentation"]], "segmentation.generate_semantic_mask": [[106, "module-Segmentation.generate_semantic_mask"]], "generate_semantic_mask() (in module segmentation.generate_semantic_mask)": [[106, "Segmentation.generate_semantic_mask.generate_semantic_mask"]], "get_mask() (segmentation.generate_semantic_mask.segmentation method)": [[106, "Segmentation.generate_semantic_mask.Segmentation.get_mask"]], "tracking": [[107, "module-Tracking"]], "tracking.final_tracking": [[108, "module-Tracking.final_tracking"]], "check_jump_gps() (in module tracking.final_tracking)": [[108, "Tracking.final_tracking.check_jump_gps"]], "check_jump_seqs() (in module tracking.final_tracking)": [[108, "Tracking.final_tracking.check_jump_seqs"]], "check_overlap_gps() (in module tracking.final_tracking)": [[108, "Tracking.final_tracking.check_overlap_gps"]], "compute_group_id() (in module tracking.final_tracking)": [[108, "Tracking.final_tracking.compute_group_id"]], "match_with_triplet_saddlecloth() (in module tracking.final_tracking)": [[108, "Tracking.final_tracking.match_with_triplet_saddlecloth"]], "merge_group() (in module tracking.final_tracking)": [[108, "Tracking.final_tracking.merge_group"]], "search_match_with_id() (in module tracking.final_tracking)": [[108, "Tracking.final_tracking.search_match_with_id"]], "sort_list_by_col() (in module tracking.final_tracking)": [[108, "Tracking.final_tracking.sort_list_by_col"]], "tracking.find_trajectories": [[109, "module-Tracking.find_trajectories"]], "box2im() (in module tracking.find_trajectories)": [[109, "Tracking.find_trajectories.box2im"]], "get_dist_change_input() (in module tracking.find_trajectories)": [[109, "Tracking.find_trajectories.get_dist_change_input"]], "get_trajectory() (in module tracking.find_trajectories)": [[109, "Tracking.find_trajectories.get_trajectory"]], "triplet_feature_to_list() (in module tracking.find_trajectories)": [[109, "Tracking.find_trajectories.triplet_feature_to_list"]], "tracking.initial_tracking": [[110, "module-Tracking.initial_tracking"]], "break_subsequences() (in module tracking.initial_tracking)": [[110, "Tracking.initial_tracking.break_subsequences"]], "initial_tracking() (in module tracking.initial_tracking)": [[110, "Tracking.initial_tracking.initial_tracking"]], "link_subsequences() (in module tracking.initial_tracking)": [[110, "Tracking.initial_tracking.link_subsequences"]], "detection (config.task attribute)": [[111, "config.Task.DETECTION"]], "frameextractor (config.task attribute)": [[111, "config.Task.FRAMEEXTRACTOR"]], "hvtconfig (class in config)": [[111, "config.HVTConfig"]], "kranjiconfig (class in config)": [[111, "config.KranjiConfig"]], "opticalflow (config.task attribute)": [[111, "config.Task.OPTICALFLOW"]], "railmask (config.task attribute)": [[111, "config.Task.RAILMASK"]], "railpolemask (config.task attribute)": [[111, "config.Task.RAILPOLEMASK"]], "sceneclassify (config.task attribute)": [[111, "config.Task.SCENECLASSIFY"]], "semanticmask (config.task attribute)": [[111, "config.Task.SEMANTICMASK"]], "stawtconfig (class in config)": [[111, "config.STAWTConfig"]], "sttconfig (class in config)": [[111, "config.STTConfig"]], "tracking (config.task attribute)": [[111, "config.Task.TRACKING"]], "task (class in config)": [[111, "config.Task"]], "config": [[111, "module-config"]], "conn_thres (config.hvtconfig attribute)": [[111, "config.HVTConfig.conn_thres"]], "conn_thres (config.kranjiconfig attribute)": [[111, "config.KranjiConfig.conn_thres"]], "conn_thres (config.stawtconfig attribute)": [[111, "config.STAWTConfig.conn_thres"]], "conn_thres (config.sttconfig attribute)": [[111, "config.STTConfig.conn_thres"]], "get_model_info() (in module config)": [[111, "config.get_model_info"]], "get_model_paths() (in module config)": [[111, "config.get_model_paths"]], "scn_max (config.hvtconfig attribute)": [[111, "config.HVTConfig.scn_max"]], "scn_max (config.kranjiconfig attribute)": [[111, "config.KranjiConfig.scn_max"]], "scn_max (config.stawtconfig attribute)": [[111, "config.STAWTConfig.scn_max"]], "scn_max (config.sttconfig attribute)": [[111, "config.STTConfig.scn_max"]], "launch_tasks() (in module main)": [[113, "main.launch_tasks"]], "main": [[113, "module-main"]], "run_horseracing() (in module main)": [[113, "main.run_horseracing"]], "task_functions() (in module main)": [[113, "main.task_functions"]], "util": [[115, "module-util"]], "save_frame() (in module util.framesaver)": [[116, "util.FrameSaver.save_frame"]], "util.framesaver": [[116, "module-util.FrameSaver"]], "horseracingdb (class in util.database)": [[117, "util.database.HorseRacingDB"]], "util.database": [[117, "module-util.database"]], "decode_img() (in module util.image_util)": [[118, "util.image_util.decode_img"]], "encode_img() (in module util.image_util)": [[118, "util.image_util.encode_img"]], "util.image_util": [[118, "module-util.image_util"]], "decode_masks() (in module util.mask_util)": [[119, "util.mask_util.decode_masks"]], "encode_masks() (in module util.mask_util)": [[119, "util.mask_util.encode_masks"]], "get_masks_for_homograhy() (in module util.mask_util)": [[119, "util.mask_util.get_masks_for_homograhy"]], "get_rail_masks() (in module util.mask_util)": [[119, "util.mask_util.get_rail_masks"]], "get_rail_pole_masks() (in module util.mask_util)": [[119, "util.mask_util.get_rail_pole_masks"]], "to_mask() (in module util.mask_util)": [[119, "util.mask_util.to_mask"]], "util.mask_util": [[119, "module-util.mask_util"]], "result (class in util.result)": [[120, "util.result.Result"]], "convert_to_excel() (util.result.result method)": [[120, "util.result.Result.convert_to_excel"]], "create_dir() (in module util.result)": [[120, "util.result.create_dir"]], "get_data_from_database() (in module util.result)": [[120, "util.result.get_data_from_database"]], "get_directories() (in module util.result)": [[120, "util.result.get_directories"]], "get_fps() (util.result.result method)": [[120, "util.result.Result.get_fps"]], "get_scene_classification_results_from_cache() (util.result.result method)": [[120, "util.result.Result.get_scene_classification_results_from_cache"]], "import_subsequences_results() (in module util.result)": [[120, "util.result.import_subsequences_results"]], "load_frames() (util.result.result method)": [[120, "util.result.Result.load_frames"]], "make_result_dir() (util.result.result method)": [[120, "util.result.Result.make_result_dir"]], "select_vid_names() (util.result.result method)": [[120, "util.result.Result.select_vid_names"]], "util.result": [[120, "module-util.result"]], "find_fps() (in module util.video_util)": [[121, "util.video_util.find_fps"]], "load_vid() (in module util.video_util)": [[121, "util.video_util.load_vid"]], "util.video_util": [[121, "module-util.video_util"]]}})